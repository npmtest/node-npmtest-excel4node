{"/home/travis/build/npmtest/node-npmtest-excel4node/test.js":"/* istanbul instrument in package npmtest_excel4node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-excel4node/lib.npmtest_excel4node.js":"/* istanbul instrument in package npmtest_excel4node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_excel4node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_excel4node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-excel4node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-excel4node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_excel4node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_excel4node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_excel4node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_excel4node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_excel4node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_excel4node.__dirname + '/lib.npmtest_excel4node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/index.js":"'use strict';\n\n/* REFERENCES\n    http://www.ecma-international.org/news/TC45_current_work/OpenXML%20White%20Paper.pdf\n    http://www.ecma-international.org/publications/standards/Ecma-376.htm\n    http://www.openoffice.org/sc/excelfileformat.pdf \n    http://officeopenxml.com/anatomyofOOXML-xlsx.php\n*/\n\n/* \n    Code references specifications sections from ECMA-376 2nd edition doc\n    ECMA-376, Second Edition, Part 1 - Fundamentals And Markup Language Reference.pdf\n    found in ECMA-376 2nd edition Part 1 download at http://www.ecma-international.org/publications/standards/Ecma-376.htm\n    Sections are referenced in code comments with § \n*/\n\nvar utils = require('./lib/utils.js');\nvar types = require('./lib/types/index.js');\n\nmodule.exports = {\n    Workbook: require('./lib/workbook/index.js'),\n    getExcelRowCol: utils.getExcelRowCol,\n    getExcelAlpha: utils.getExcelAlpha,\n    getExcelTS: utils.getExcelTS,\n    getExcelCellRef: utils.getExcelCellRef,\n    PaperSize: types.paperSize,\n    CellComment: types.cellComments,\n    PrintError: types.printError,\n    PageOrder: types.pageOrder,\n    Orientation: types.orientation,\n    Pane: types.pane,\n    PaneState: types.paneState,\n    HorizontalAlignment: types.alignment.horizontal,\n    VerticalAlignment: types.alignment.vertical,\n    BorderStyle: types.borderStyle,\n    PresetColorVal: types.excelColor,\n    PatternType: types.fillPattern,\n    PositiveUniversalMeasure: types.positiveUniversalMeasure\n};\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/utils.js":"'use strict';\n\nvar types = require('./types/index.js');\n\nvar _bitXOR = function _bitXOR(a, b) {\n    var maxLength = a.length > b.length ? a.length : b.length;\n\n    var padString = '';\n    for (var i = 0; i < maxLength; i++) {\n        padString += '0';\n    }\n\n    a = String(padString + a).substr(-maxLength);\n    b = String(padString + b).substr(-maxLength);\n\n    var response = '';\n    for (var _i = 0; _i < a.length; _i++) {\n        response += a[_i] === b[_i] ? 0 : 1;\n    }\n    return response;\n};\n\nvar generateRId = function generateRId() {\n    var text = 'R';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (var i = 0; i < 16; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\nvar _rotateBinary = function _rotateBinary(bin) {\n    return bin.substr(1, bin.length - 1) + bin.substr(0, 1);\n};\n\nvar _getHashForChar = function _getHashForChar(char, hash) {\n    hash = hash ? hash : '0000';\n    var charCode = char.charCodeAt(0);\n    var hashBin = parseInt(hash, 16).toString(2);\n    var charBin = parseInt(charCode, 10).toString(2);\n    hashBin = String('000000000000000' + hashBin).substr(-15);\n    charBin = String('000000000000000' + charBin).substr(-15);\n    var nextHash = _bitXOR(hashBin, charBin);\n    nextHash = _rotateBinary(nextHash);\n    nextHash = parseInt(nextHash, 2).toString(16);\n\n    return nextHash;\n};\n\n//  http://www.openoffice.org/sc/excelfileformat.pdf section 4.18.4\nvar getHashOfPassword = function getHashOfPassword(str) {\n    var curHash = '0000';\n    for (var i = str.length - 1; i >= 0; i--) {\n        curHash = _getHashForChar(str[i], curHash);\n    }\n    var curHashBin = parseInt(curHash, 16).toString(2);\n    var charCountBin = parseInt(str.length, 10).toString(2);\n    var saltBin = parseInt('CE4B', 16).toString(2);\n\n    var firstXOR = _bitXOR(curHashBin, charCountBin);\n    var finalHashBin = _bitXOR(firstXOR, saltBin);\n    var finalHash = String('0000' + parseInt(finalHashBin, 2).toString(16).toUpperCase()).slice(-4);\n\n    return finalHash;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B\n * getExcelAlpha(2);\n */\nvar getExcelAlpha = function getExcelAlpha(colNum) {\n    var remaining = colNum;\n    var aCharCode = 65;\n    var columnName = '';\n    while (remaining > 0) {\n        var mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    }\n    return columnName;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} rowNum Row number that is to be transalated\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B1\n * getExcelCellRef(1, 2);\n */\nvar getExcelCellRef = function getExcelCellRef(rowNum, colNum) {\n    var remaining = colNum;\n    var aCharCode = 65;\n    var columnName = '';\n    while (remaining > 0) {\n        var mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    }\n    return columnName + rowNum;\n};\n\n/**\n * Translates a Excel cell represenation into row and column numerical equivalents \n * @function getExcelRowCol\n * @param {String} str Excel cell representation\n * @returns {Object} Object keyed with row and col\n * @example\n * // returns {row: 2, col: 3}\n * getExcelRowCol('C2')\n */\nvar getExcelRowCol = function getExcelRowCol(str) {\n    var numeric = str.split(/\\D/).filter(function (el) {\n        return el !== '';\n    })[0];\n    var alpha = str.split(/\\d/).filter(function (el) {\n        return el !== '';\n    })[0];\n    var row = parseInt(numeric, 10);\n    var col = alpha.toUpperCase().split('').reduce(function (a, b, index, arr) {\n        return a + (b.charCodeAt(0) - 64) * Math.pow(26, arr.length - index - 1);\n    }, 0);\n    return { row: row, col: col };\n};\n\n/**\n * Translates a date into Excel timestamp\n * @function getExcelTS\n * @param {Date} date Date to translate\n * @returns {Number} Excel timestamp\n * @example\n * // returns 29810.958333333332\n * getExcelTS(new Date('08/13/1981'));\n */\nvar getExcelTS = function getExcelTS(date) {\n\n    var thisDt = new Date(date);\n    thisDt.setDate(thisDt.getDate() + 1);\n    // Take timezone into account when calculating date\n    thisDt.setMinutes(thisDt.getMinutes() - thisDt.getTimezoneOffset());\n\n    var epoch = new Date(1899, 11, 31);\n    // Take timezone into account when calculating epoch\n    epoch.setMinutes(epoch.getMinutes() - epoch.getTimezoneOffset());\n\n    // Get milliseconds between date sent to function and epoch \n    var diff2 = thisDt.getTime() - epoch.getTime();\n\n    var ts = diff2 / (1000 * 60 * 60 * 24);\n    return ts;\n};\n\nvar sortCellRefs = function sortCellRefs(a, b) {\n    var aAtt = getExcelRowCol(a);\n    var bAtt = getExcelRowCol(b);\n    if (aAtt.col === bAtt.col) {\n        return aAtt.row - bAtt.row;\n    } else {\n        return aAtt.col - bAtt.col;\n    }\n};\n\nvar arrayIntersectSafe = function arrayIntersectSafe(a, b) {\n\n    if (a instanceof Array && b instanceof Array) {\n        var ai = 0,\n            bi = 0;\n        var result = new Array();\n\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] < b[bi]) {\n                ai++;\n            } else if (a[ai] > b[bi]) {\n                bi++;\n            } else {\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n        }\n        return result;\n    } else {\n        throw new TypeError('Both variables sent to arrayIntersectSafe must be arrays');\n    }\n};\n\nvar getAllCellsInExcelRange = function getAllCellsInExcelRange(range) {\n    var cells = range.split(':');\n    var cell1props = getExcelRowCol(cells[0]);\n    var cell2props = getExcelRowCol(cells[1]);\n    return getAllCellsInNumericRange(cell1props.row, cell1props.col, cell2props.row, cell2props.col);\n};\n\nvar getAllCellsInNumericRange = function getAllCellsInNumericRange(row1, col1, row2, col2) {\n    var response = [];\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n    for (var i = row1; i <= row2; i++) {\n        for (var j = col1; j <= col2; j++) {\n            response.push(getExcelAlpha(j) + i);\n        }\n    }\n    return response.sort(sortCellRefs);\n};\n\nvar boolToInt = function boolToInt(bool) {\n    if (bool === true) {\n        return 1;\n    }\n    if (bool === false) {\n        return 0;\n    }\n    if (parseInt(bool) === 1) {\n        return 1;\n    }\n    if (parseInt(bool) === 0) {\n        return 0;\n    }\n    throw new TypeError('Value sent to boolToInt must be true, false, 1 or 0');\n};\n\n/*\n * Helper Functions\n */\n\nmodule.exports = {\n    generateRId: generateRId,\n    getHashOfPassword: getHashOfPassword,\n    getExcelAlpha: getExcelAlpha,\n    getExcelCellRef: getExcelCellRef,\n    getExcelRowCol: getExcelRowCol,\n    getExcelTS: getExcelTS,\n    sortCellRefs: sortCellRefs,\n    arrayIntersectSafe: arrayIntersectSafe,\n    getAllCellsInExcelRange: getAllCellsInExcelRange,\n    getAllCellsInNumericRange: getAllCellsInNumericRange,\n    boolToInt: boolToInt\n};\n//# sourceMappingURL=utils.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/index.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar dirItems = fs.readdirSync(__dirname);\n\ndirItems.forEach(function (i) {\n    if (i !== 'index.js' && i.substr(i.length - 3, 3) === '.js') {\n        module.exports[i.substr(0, i.length - 3)] = require(path.resolve(__dirname, i));\n    }\n});\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/alignment.js":"'use strict';\n\nfunction horizontalAlignments() {\n    var _this = this;\n\n    this.opts = [// §18.18.40 ST_HorizontalAlignment (Horizontal Alignment Type)\n    'center', 'centerContinuous', 'distributed', 'fill', 'general', 'justify', 'left', 'right'];\n    this.opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nfunction verticalAlignments() {\n    var _this2 = this;\n\n    this.opts = [//§18.18.88 ST_VerticalAlignment (Vertical Alignment Types)\n    'bottom', 'center', 'distributed', 'justify', 'top'];\n    this.opts.forEach(function (o, i) {\n        _this2[o] = i + 1;\n    });\n}\n\nfunction readingOrders() {\n    this['contextDependent'] = 0;\n    this['leftToRight'] = 1;\n    this['rightToLeft'] = 2;\n    this.opts = ['contextDependent', 'leftToRight', 'rightToLeft'];\n}\n\nhorizontalAlignments.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for alignment.horizontal ' + val + '; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nverticalAlignments.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for alignment.vertical ' + val + '; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nreadingOrders.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for alignment.readingOrder ' + val + '; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports.vertical = new verticalAlignments();\nmodule.exports.horizontal = new horizontalAlignments();\nmodule.exports.readingOrder = new readingOrders();\n//# sourceMappingURL=alignment.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/borderStyle.js":"'use strict';\n\nfunction items() {\n    var _this = this;\n\n    this.opts = [//§18.18.3 ST_BorderStyle (Border Line Styles)\n    'none', 'thin', 'medium', 'dashed', 'dotted', 'thick', 'double', 'hair', 'mediumDashed', 'dashDot', 'mediumDashDot', 'dashDotDot', 'mediumDashDotDot', 'slantDashDot'];\n    this.opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for ST_BorderStyle; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=borderStyle.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/cellComment.js":"'use strict';\n\n//§18.18.5 ST_CellComments (Cell Comments)\n\nfunction items() {\n    var _this = this;\n\n    this.opts = ['none', 'asDisplayed', 'atEnd'];\n    this.opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for ST_CellComments; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=cellComment.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/colorScheme.js":"'use strict';\n\nfunction items() {\n    var _this = this;\n\n    this.opts = [//§20.1.6.2 clrScheme (Color Scheme)\n    'dark 1', 'light 1', 'dark 2', 'light 2', 'accent 1', 'accent 2', 'accent 3', 'accent 4', 'accent 5', 'accent 6', 'hyperlink', 'followed hyperlink'];\n    this.opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val.toLowerCase()] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for clrScheme; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=colorScheme.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/excelColor.js":"'use strict';\n\nfunction items() {\n    var _this = this;\n\n    // subset of §20.1.10.48 ST_PresetColorVal (Preset Color Value)\n    this['aqua'] = 'FF33CCCC';\n    this['black'] = 'FF000000';\n    this['blue'] = 'FF0000FF';\n    this['blue-gray'] = 'FF666699';\n    this['bright green'] = 'FF00FF00';\n    this['brown'] = 'FF993300';\n    this['dark blue'] = 'FF000080';\n    this['dark green'] = 'FF003300';\n    this['dark red'] = 'FF800000';\n    this['dark teal'] = 'FF003366';\n    this['dark yellow'] = 'FF808000';\n    this['gold'] = 'FFFFCC00';\n    this['gray-25'] = 'FFC0C0C0';\n    this['gray-40'] = 'FF969696';\n    this['gray-50'] = 'FF808080';\n    this['gray-80'] = 'FF333333';\n    this['green'] = 'FF008000';\n    this['indigo'] = 'FF333399';\n    this['lavender'] = 'FFCC99FF';\n    this['light blue'] = 'FF3366FF';\n    this['light green'] = 'FFCCFFCC';\n    this['light orange'] = 'FFFF9900';\n    this['light turquoise'] = 'FFCCFFFF';\n    this['light yellow'] = 'FFFFFF99';\n    this['lime'] = 'FF99CC00';\n    this['olive green'] = 'FF333300';\n    this['orange'] = 'FFFF6600';\n    this['pale blue'] = 'FF99CCFF';\n    this['pink'] = 'FFFF00FF';\n    this['plum'] = 'FF993366';\n    this['red'] = 'FFFF0000';\n    this['rose'] = 'FFFF99CC';\n    this['sea green'] = 'FF339966';\n    this['sky blue'] = 'FF00CCFF';\n    this['tan'] = 'FFFFCC99';\n    this['teal'] = 'FF008080';\n    this['turquoise'] = 'FF00FFFF';\n    this['violet'] = 'FF800080';\n    this['white'] = 'FFFFFFFF';\n    this['yellow'] = 'FFFFFF00';\n\n    this.opts = [];\n    Object.keys(this).forEach(function (k) {\n        if (typeof _this[k] === 'string') {\n            _this.opts.push(k);\n        }\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val.toLowerCase()] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for ST_PresetColorVal; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nitems.prototype.getColor = function (val) {\n    // check for RGB, RGBA or Excel Color Names and return RGBA\n\n    if (typeof this[val.toLowerCase()] === 'string') {\n        // val was a named color that matches predefined list. return corresponding color\n        return this[val.toLowerCase()];\n    } else if (val.length === 8 && /^[a-fA-F0-9()]+$/.test(val)) {\n        // val is already a properly formatted color string, return upper case version of itself\n        return val.toUpperCase();\n    } else if (val.length === 6 && /^[a-fA-F0-9()]+$/.test(val)) {\n        // val is color code without Alpha, add it and return\n        return 'FF' + val.toUpperCase();\n    } else if (val.length === 7 && val.substr(0, 1) === '#' && /^[a-fA-F0-9()]+$/.test(val.substr(1))) {\n        // val was sent as html style hex code, remove # and add alpha\n        return 'FF' + val.substr(1).toUpperCase();\n    } else {\n        // I don't know what this is, return valid color and console.log error\n        throw new TypeError('valid color options are html style hex codes, ARGB strings or these colors by name: %s', this.opts.join(', '));\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=excelColor.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/fillPattern.js":"'use strict';\n\nfunction items() {\n    var _this = this;\n\n    this.opts = [//§18.18.55 ST_PatternType (Pattern Type)\n    'darkDown', 'darkGray', 'darkGrid', 'darkHorizontal', 'darkTrellis', 'darkUp', 'darkVerical', 'gray0625', 'gray125', 'lightDown', 'lightGray', 'lightGrid', 'lightHorizontal', 'lightTrellis', 'lightUp', 'lightVertical', 'mediumGray', 'none', 'solid'];\n    this.opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for ST_PatternType; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=fillPattern.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/fontFamily.js":"'use strict';\n\nfunction items() {\n    var _this = this;\n\n    this.opts = [//§18.8.18 family (Font Family)\n    'n/a', 'roman', 'swiss', 'modern', 'script', 'decorative'];\n    this.opts.forEach(function (o, i) {\n        _this[o] = i;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (typeof val !== 'string') {\n        throw new TypeError('Invalid value for Font Family ' + val + '; Value must be one of ' + this.opts.join(', '));\n    }\n\n    if (this[val.toLowerCase()] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for Font Family ' + val + '; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=fontFamily.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/orientation.js":"'use strict';\n\n//§18.18.50 ST_Orientation (Orientation)\n\nfunction items() {\n    var _this = this;\n\n    var opts = ['default', 'portrait', 'landscape'];\n    opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val.toLowerCase()] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for pageSetup.orientation; Value must be one of ' + opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=orientation.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/pageOrder.js":"'use strict';\n\n//§18.18.51 ST_PageOrder (Page Order)\n\nfunction items() {\n    var _this = this;\n\n    var opts = ['downThenOver', 'overThenDown'];\n    opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for pageSetup.pageOrder; Value must be one of ' + opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=pageOrder.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/pane.js":"'use strict';\n\n//§18.18.52 ST_Pane (Pane Types)\n\nfunction items() {\n    var _this = this;\n\n    var opts = ['bottomLeft', 'bottomRight', 'topLeft', 'topRight'];\n    opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for sheetview.pane.activePane; Value must be one of ' + opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=pane.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/paneState.js":"'use strict';\n\n//§ST_PaneState (Pane State)\n\nfunction items() {\n    var _this = this;\n\n    var opts = ['split', 'frozen', 'frozenSplit'];\n    opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for sheetView.pane.state; Value must be one of ' + opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=paneState.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/paperSize.js":"'use strict';\n\nfunction items() {\n    var _this = this;\n\n    // As defined in §18.3.1.63 pageSetup (Page Setup Settings)\n    this.LETTER_PAPER = 1; // Letter paper (8.5 in. by 11 in.)\n    this.LETTER_SMALL_PAPER = 2; // Letter small paper (8.5 in. by 11 in.)\n    this.TABLOID_PAPER = 3; // Tabloid paper (11 in. by 17 in.)\n    this.LEDGER_PAPER = 4; // Ledger paper (17 in. by 11 in.)\n    this.LEGAL_PAPER = 5; // Legal paper (8.5 in. by 14 in.)\n    this.STATEMENT_PAPER = 6; // Statement paper (5.5 in. by 8.5 in.)\n    this.EXECUTIVE_PAPER = 7; // Executive paper (7.25 in. by 10.5 in.)\n    this.A3_PAPER = 8; // A3 paper (297 mm by 420 mm)\n    this.A4_PAPER = 9; // A4 paper (210 mm by 297 mm)\n    this.A4_SMALL_PAPER = 10; // A4 small paper (210 mm by 297 mm)\n    this.A5_PAPER = 11; // A5 paper (148 mm by 210 mm)\n    this.B4_PAPER = 12; // B4 paper (250 mm by 353 mm)\n    this.B5_PAPER = 13; // B5 paper (176 mm by 250 mm)\n    this.FOLIO_PAPER = 14; // Folio paper (8.5 in. by 13 in.)\n    this.QUARTO_PAPER = 15; // Quarto paper (215 mm by 275 mm)\n    this.STANDARD_PAPER_10_BY_14_IN = 16; // Standard paper (10 in. by 14 in.)\n    this.STANDARD_PAPER_11_BY_17_IN = 17; // Standard paper (11 in. by 17 in.)\n    this.NOTE_PAPER = 18; // Note paper (8.5 in. by 11 in.)\n    this.NUMBER_9_ENVELOPE = 19; // #9 envelope (3.875 in. by 8.875 in.)\n    this.NUMBER_10_ENVELOPE = 20; // #10 envelope (4.125 in. by 9.5 in.)\n    this.NUMBER_11_ENVELOPE = 21; // #11 envelope (4.5 in. by 10.375 in.)\n    this.NUMBER_12_ENVELOPE = 22; // #12 envelope (4.75 in. by 11 in.)\n    this.NUMBER_14_ENVELOPE = 23; // #14 envelope (5 in. by 11.5 in.)\n    this.C_PAPER = 24; // C paper (17 in. by 22 in.)\n    this.D_PAPER = 25; // D paper (22 in. by 34 in.)\n    this.E_PAPER = 26; // E paper (34 in. by 44 in.)\n    this.DL_PAPER = 27; // DL envelope (110 mm by 220 mm)\n    this.C5_ENVELOPE = 28; // C5 envelope (162 mm by 229 mm)\n    this.C3_ENVELOPE = 29; // C3 envelope (324 mm by 458 mm)\n    this.C4_ENVELOPE = 30; // C4 envelope (229 mm by 324 mm)\n    this.C6_ENVELOPE = 31; // C6 envelope (114 mm by 162 mm)\n    this.C65_ENVELOPE = 32; // C65 envelope (114 mm by 229 mm)\n    this.B4_ENVELOPE = 33; // B4 envelope (250 mm by 353 mm)\n    this.B5_ENVELOPE = 34; // B5 envelope (176 mm by 250 mm)\n    this.B6_ENVELOPE = 35; // B6 envelope (176 mm by 125 mm)\n    this.ITALY_ENVELOPE = 36; // Italy envelope (110 mm by 230 mm)\n    this.MONARCH_ENVELOPE = 37; // Monarch envelope (3.875 in. by 7.5 in.).\n    this.SIX_THREE_QUARTERS_ENVELOPE = 38; // 6 3/4 envelope (3.625 in. by 6.5 in.)\n    this.US_STANDARD_FANFOLD = 39; // US standard fanfold (14.875 in. by 11 in.)\n    this.GERMAN_STANDARD_FANFOLD = 40; // German standard fanfold (8.5 in. by 12 in.)\n    this.GERMAN_LEGAL_FANFOLD = 41; // German legal fanfold (8.5 in. by 13 in.)\n    this.ISO_B4 = 42; // ISO B4 (250 mm by 353 mm)\n    this.JAPANESE_DOUBLE_POSTCARD = 43; // Japanese double postcard (200 mm by 148 mm)\n    this.STANDARD_PAPER_9_BY_11_IN = 44; // Standard paper (9 in. by 11 in.)\n    this.STANDARD_PAPER_10_BY_11_IN = 45; // Standard paper (10 in. by 11 in.)\n    this.STANDARD_PAPER_15_BY_11_IN = 46; // Standard paper (15 in. by 11 in.)\n    this.INVITE_ENVELOPE = 47; // Invite envelope (220 mm by 220 mm)\n    this.LETTER_EXTRA_PAPER = 50; // Letter extra paper (9.275 in. by 12 in.)\n    this.LEGAL_EXTRA_PAPER = 51; // Legal extra paper (9.275 in. by 15 in.)\n    this.TABLOID_EXTRA_PAPER = 52; // Tabloid extra paper (11.69 in. by 18 in.)\n    this.A4_EXTRA_PAPER = 53; // A4 extra paper (236 mm by 322 mm)\n    this.LETTER_TRANSVERSE_PAPER = 54; // Letter transverse paper (8.275 in. by 11 in.)\n    this.A4_TRANSVERSE_PAPER = 55; // A4 transverse paper (210 mm by 297 mm)\n    this.LETTER_EXTRA_TRANSVERSE_PAPER = 56; // Letter extra transverse paper (9.275 in. by 12 in.)\n    this.SUPER_A_SUPER_A_A4_PAPER = 57; // SuperA/SuperA/A4 paper (227 mm by 356 mm)\n    this.SUPER_B_SUPER_B_A3_PAPER = 58; // SuperB/SuperB/A3 paper (305 mm by 487 mm)\n    this.LETTER_PLUS_PAPER = 59; // Letter plus paper (8.5 in. by 12.69 in.)\n    this.A4_PLUS_PAPER = 60; // A4 plus paper (210 mm by 330 mm)\n    this.A5_TRANSVERSE_PAPER = 61; // A5 transverse paper (148 mm by 210 mm)\n    this.JIS_B5_TRANSVERSE_PAPER = 62; // JIS B5 transverse paper (182 mm by 257 mm)\n    this.A3_EXTRA_PAPER = 63; // A3 extra paper (322 mm by 445 mm)\n    this.A5_EXTRA_PAPER = 64; // A5 extra paper (174 mm by 235 mm)\n    this.ISO_B5_EXTRA_PAPER = 65; // ISO B5 extra paper (201 mm by 276 mm)\n    this.A2_PAPER = 66; // A2 paper (420 mm by 594 mm)\n    this.A3_TRANSVERSE_PAPER = 67; // A3 transverse paper (297 mm by 420 mm)\n    this.A3_EXTRA_TRANSVERSE_PAPER = 68; // A3 extra transverse paper (322 mm by 445 mm)\n\n    this.opts = [];\n    Object.keys(this).forEach(function (k) {\n        if (typeof _this[k] === 'number') {\n            _this.opts.push(k);\n        }\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val.toUpperCase()] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for PAPER_SIZE; Value must be one of ' + this.opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=paperSize.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/positiveUniversalMeasure.js":"'use strict';\n\n//§22.9.2.12 ST_PositiveUniversalMeasure (Positive Universal Measurement)\n\nfunction measure() {}\n\nmeasure.prototype.validate = function (val) {\n    var re = new RegExp('[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)');\n    if (re.test(val) !== true) {\n        throw new TypeError('Invalid value for universal positive measure. Value must a positive Float immediately followed by unit of measure from list mm, cm, in, pt, pc, pi. i.e. 10.5cm');\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new measure();\n//# sourceMappingURL=positiveUniversalMeasure.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/types/printError.js":"'use strict';\n\n//§18.18.60 ST_PrintError (Print Errors)\nfunction items() {\n    var _this = this;\n\n    var opts = ['displayed', 'blank', 'dash', 'NA'];\n    opts.forEach(function (o, i) {\n        _this[o] = i + 1;\n    });\n}\n\nitems.prototype.validate = function (val) {\n    if (this[val] === undefined) {\n        var opts = [];\n        for (var name in this) {\n            if (this.hasOwnProperty(name)) {\n                opts.push(name);\n            }\n        }\n        throw new TypeError('Invalid value for pageSetup.errors; Value must be one of ' + opts.join(', '));\n    } else {\n        return true;\n    }\n};\n\nmodule.exports = new items();\n//# sourceMappingURL=printError.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/workbook/index.js":"'use strict';\n\nmodule.exports = require('./workbook.js');\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/workbook/workbook.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _ = require('lodash');\nvar fs = require('fs');\nvar utils = require('../utils.js');\nvar Worksheet = require('../worksheet');\nvar Style = require('../style');\nvar Border = require('../style/classes/border.js');\nvar Fill = require('../style/classes/fill.js');\nvar DXFCollection = require('./dxfCollection.js');\nvar MediaCollection = require('./mediaCollection.js');\nvar DefinedNameCollection = require('../classes/definedNameCollection.js');\nvar SlothLogger = require('sloth-logger');\nvar types = require('../types/index.js');\nvar builder = require('./builder.js');\nvar http = require('http');\n\n/* Available options for Workbook\n{\n    jszip : {\n        compression : 'DEFLATE'\n    },\n    defaultFont : {\n        size : 12,\n        family : 'Calibri',\n        color : 'FFFFFFFF'\n    }\n}\n*/\n// Default Options for Workbook\nvar workbookDefaultOpts = {\n    jszip: {\n        compression: 'DEFLATE'\n    },\n    defaultFont: {\n        'color': 'FF000000',\n        'name': 'Calibri',\n        'size': 12,\n        'family': 'roman'\n    },\n    dateFormat: 'm/d/yy'\n};\n\nvar Workbook = function () {\n\n    /**\n     * @class Workbook\n     * @param {Object} opts Workbook settings\n     * @param {Object} opts.jszip\n     * @param {String} opts.jszip.compression JSZip compression type. defaults to 'DEFLATE'\n     * @param {Object} opts.defaultFont\n     * @param {String} opts.defaultFont.color HEX value of default font color. defaults to #000000\n     * @param {String} opts.defaultFont.name Font name. defaults to Calibri\n     * @param {Number} opts.defaultFont.size Font size. defaults to 12\n     * @param {String} opts.defaultFont.family Font family. defaults to roman\n     * @param {String} opts.dataFormat Specifies the format for dates in the Workbook. defaults to 'm/d/yy'\n     * @returns {Workbook}\n     */\n    function Workbook(opts) {\n        _classCallCheck(this, Workbook);\n\n        opts = opts ? opts : {};\n\n        this.logger = new SlothLogger.Logger({\n            logLevel: Number.isNaN(parseInt(opts.logLevel)) ? 0 : parseInt(opts.logLevel)\n        });\n\n        this.opts = _.merge({}, workbookDefaultOpts, opts);\n\n        this.sheets = [];\n        this.sharedStrings = [];\n        this.styles = [];\n        this.stylesLookup = {};\n        this.dxfCollection = new DXFCollection(this);\n        this.mediaCollection = new MediaCollection();\n        this.definedNameCollection = new DefinedNameCollection();\n        this.styleData = {\n            'numFmts': [],\n            'fonts': [],\n            'fills': [new Fill({ type: 'pattern', patternType: 'none' }), new Fill({ type: 'pattern', patternType: 'gray125' })],\n            'borders': [new Border()],\n            'cellXfs': [{\n                'borderId': null,\n                'fillId': null,\n                'fontId': 0,\n                'numFmtId': null\n            }]\n        };\n\n        // Lookups for style components to quickly find existing entries\n        // - Lookup keys are stringified JSON of a style's toObject result\n        // - Lookup values are the indexes for the actual entry in the styleData arrays\n        this.styleDataLookup = {\n            'fonts': {},\n            'fills': this.styleData.fills.reduce(function (ret, fill, index) {\n                ret[JSON.stringify(fill.toObject())] = index;\n                return ret;\n            }, {}),\n            'borders': this.styleData.borders.reduce(function (ret, border, index) {\n                ret[JSON.stringify(border.toObject())] = index;\n                return ret;\n            }, {})\n        };\n\n        // Set Default Font and Style\n        this.createStyle({ font: this.opts.defaultFont });\n    }\n\n    /**\n     * setSelectedTab\n     * @param {Number} tab number of sheet that should be displayed when workbook opens. tabs are indexed starting with 1\n     **/\n\n\n    _createClass(Workbook, [{\n        key: 'setSelectedTab',\n        value: function setSelectedTab(id) {\n            this.sheets.forEach(function (s) {\n                if (s.sheetId === id) {\n                    s.opts.sheetView.tabSelected = 1;\n                } else {\n                    s.opts.sheetView.tabSelected = 0;\n                }\n            });\n        }\n\n        /**\n         * writeToBuffer\n         * Writes Excel data to a node Buffer.\n         */\n\n    }, {\n        key: 'writeToBuffer',\n        value: function writeToBuffer() {\n            return builder.writeToBuffer(this);\n        }\n\n        /**\n         * Generate .xlsx file.\n         * @param {String} fileName Name of Excel workbook with .xslx extension\n         * @param {http.response | callback} http response object or callback function (optional).\n         * If http response object is given, file is written to http response. Useful for web applications.\n         * If callback is given, callback called with (err, fs.Stats) passed\n         */\n\n    }, {\n        key: 'write',\n        value: function write(fileName, handler) {\n\n            builder.writeToBuffer(this).then(function (buffer) {\n                switch (typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) {\n                    // handler passed as http response object.\n\n                    case 'object':\n                        if (handler instanceof http.ServerResponse) {\n                            handler.writeHead(200, {\n                                'Content-Length': buffer.length,\n                                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n                                'Content-Disposition': 'attachment; filename=\"' + fileName + '\"'\n                            });\n                            handler.end(buffer);\n                        } else {\n                            throw new TypeError('Unknown object sent to write function.');\n                        }\n                        break;\n\n                    // handler passed as callback function\n                    case 'function':\n                        fs.writeFile(fileName, buffer, function (err) {\n                            if (err) {\n                                handler(err);\n                            } else {\n                                fs.stat(fileName, handler);\n                            }\n                        });\n                        break;\n\n                    // no handler passed, write file to FS.\n                    default:\n\n                        fs.writeFile(fileName, buffer, function (err) {\n                            if (err) {\n                                throw err;\n                            }\n                        });\n                        break;\n                }\n            }).catch(function (e) {\n                throw new Error(e.stack);\n            });\n        }\n\n        /**\n         * Add a worksheet to the Workbook\n         * @param {String} name Name of the Worksheet\n         * @param {Object} opts Options for Worksheet. See Worksheet class definition\n         * @returns {Worksheet}\n         */\n\n    }, {\n        key: 'addWorksheet',\n        value: function addWorksheet(name, opts) {\n            var newLength = this.sheets.push(new Worksheet(this, name, opts));\n            return this.sheets[newLength - 1];\n        }\n\n        /**\n         * Add a Style to the Workbook\n         * @param {Object} opts Options for the style. See Style class definition\n         * @returns {Style}\n         */\n\n    }, {\n        key: 'createStyle',\n        value: function createStyle(opts) {\n            var thisStyle = new Style(this, opts);\n            var lookupKey = JSON.stringify(thisStyle.toObject());\n\n            // Use existing style if one exists\n            if (this.stylesLookup[lookupKey]) {\n                return this.stylesLookup[lookupKey];\n            }\n\n            this.stylesLookup[lookupKey] = thisStyle;\n            var index = this.styles.push(thisStyle) - 1;\n            this.styles[index].ids.cellXfs = index;\n            return this.styles[index];\n        }\n\n        /**\n         * Gets the index of a string from the shared string array if exists and adds the string if it does not and returns the new index\n         * @param {String} val Text of string\n         * @returns {Number} index of the string in the shared strings array\n         */\n\n    }, {\n        key: 'getStringIndex',\n        value: function getStringIndex(val) {\n            if (this.sharedStrings.indexOf(val) < 0) {\n                this.sharedStrings.push(val);\n            }\n            return this.sharedStrings.indexOf(val);\n        }\n    }]);\n\n    return Workbook;\n}();\n\nmodule.exports = Workbook;\n//# sourceMappingURL=workbook.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/index.js":"'use strict';\n\nmodule.exports = require('./worksheet.js');\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/worksheet.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _ = require('lodash');\nvar CfRulesCollection = require('./cf/cf_rules_collection');\nvar cellAccessor = require('../cell');\nvar rowAccessor = require('../row');\nvar colAccessor = require('../column');\nvar wsDefaultParams = require('./sheet_default_params.js');\nvar HyperlinkCollection = require('./classes/hyperlink.js').HyperlinkCollection;\nvar DataValidation = require('./classes/dataValidation.js');\nvar wsDrawing = require('../drawing/index.js');\nvar xmlBuilder = require('./builder.js');\nvar optsValidator = require('./optsValidator.js');\n\nvar Worksheet = function () {\n    /**\n     * Create a Worksheet.\n     * @class Worksheet\n     * @param {Workbook} wb Workbook that the Worksheet will belong to\n     * @param {String} name Name of Worksheet\n     * @param {Object} opts Worksheet settings\n     * @param {Object} opts.margins\n     * @param {Number} opts.margins.bottom Bottom margin in inches\n     * @param {Number} opts.margins.footer Footer margin in inches\n     * @param {Number} opts.margins.header Header margin in inches\n     * @param {Number} opts.margins.left Left margin in inches\n     * @param {Number} opts.margins.right Right margin in inches\n     * @param {Number} opts.margins.top Top margin in inches\n     * @param {Object} opts.printOptions Print Options object\n     * @param {Boolean} opts.printOptions.centerHorizontal Should data be centered horizontally when printed\n     * @param {Boolean} opts.printOptions.centerVertical Should data be centered vertically when printed\n     * @param {Boolean} opts.printOptions.printGridLines Should gridlines by printed\n     * @param {Boolean} opts.printOptions.printHeadings Should Heading be printed\n     * @param {String} opts.headerFooter Set Header and Footer strings and options. \n     * @param {String} opts.headerFooter.evenFooter Even footer text\n     * @param {String} opts.headerFooter.evenHeader Even header text\n     * @param {String} opts.headerFooter.firstFooter First footer text\n     * @param {String} opts.headerFooter.firstHeader First header text\n     * @param {String} opts.headerFooter.oddFooter Odd footer text\n     * @param {String} opts.headerFooter.oddHeader Odd header text\n     * @param {Boolean} opts.headerFooter.alignWithMargins Should header/footer align with margins\n     * @param {Boolean} opts.headerFooter.differentFirst Should header/footer show a different header/footer on first page\n     * @param {Boolean} opts.headerFooter.differentOddEven Should header/footer show a different header/footer on odd and even pages\n     * @param {Boolean} opts.headerFooter.scaleWithDoc Should header/footer scale when doc zoom is changed\n     * @param {Object} opts.pageSetup\n     * @param {Boolean} opts.pageSetup.blackAndWhite\n     * @param {String} opts.pageSetup.cellComments one of 'none', 'asDisplayed', 'atEnd'\n     * @param {Number} opts.pageSetup.copies How many copies to print\n     * @param {Boolean} opts.pageSetup.draft Should quality be draft\n     * @param {String} opts.pageSetup.errors One of 'displayed', 'blank', 'dash', 'NA'\n     * @param {Number} opts.pageSetup.firstPageNumber Should the page number of the first page be printed\n     * @param {Number} opts.pageSetup.fitToHeight Number of vertical pages to fit to\n     * @param {Number} opts.pageSetup.fitToWidth Number of horizontal pages to fit to\n     * @param {Number} opts.pageSetup.horizontalDpi \n     * @param {String} opts.pageSetup.orientation One of 'default', 'portrait', 'landscape'\n     * @param {String} opts.pageSetup.pageOrder One of 'downThenOver', 'overThenDown'\n     * @param {String} opts.pageSetup.paperHeight Value must a positive Float immediately followed by unit of measure from list mm, cm, in, pt, pc, pi. i.e. '10.5cm'\n     * @param {String} opts.pageSetup.paperSize see lib/types/paperSize.js for all types and descriptions of types. setting paperSize overrides paperHeight and paperWidth settings\n     * @param {String} opts.pageSetup.paperWidth Value must a positive Float immediately followed by unit of measure from list mm, cm, in, pt, pc, pi. i.e. '10.5cm'\n     * @param {Number} opts.pageSetup.scale zoom of worksheet\n     * @param {Boolean} opts.pageSetup.useFirstPageNumber\n     * @param {Boolean} opts.pageSetup.usePrinterDefaults\n     * @param {Number} opts.pageSetup.verticalDpi \n     * @param {Object} opts.sheetView \n     * @param {Object} opts.sheetView.pane \n     * @param {String} opts.sheetView.pane.activePane one of 'bottomLeft', 'bottomRight', 'topLeft', 'topRight'\n     * @param {String} opts.sheetView.pane.state ne of 'split', 'frozen', 'frozenSplit'\n     * @param {String} opts.sheetView.pane.topLeftCell Cell Reference i.e. 'A1'\n     * @param {String} opts.sheetView.pane.xSplit Horizontal position of the split, in 1/20th of a point; 0 (zero) if none. If the pane is frozen, this value indicates the number of columns visible in the top pane.\n     * @param {String} opts.sheetView.pane.ySplit Vertical position of the split, in 1/20th of a point; 0 (zero) if none. If the pane is frozen, this value indicates the number of rows visible in the left pane.\n     * @param {Boolean} opts.sheetView.rightToLeft Flag indicating whether the sheet is in 'right to left' display mode. When in this mode, Column A is on the far right, Column B ;is one column left of Column A, and so on. Also, information in cells is displayed in the Right to Left format.\n     * @param {Number} opts.sheetView.zoomScale  Defaults to 100\n     * @param {Number} opts.sheetView.zoomScaleNormal Defaults to 100\n     * @param {Number} opts.sheetView.zoomScalePageLayoutView Defaults to 100\n     * @param {Object} opts.sheetFormat \n     * @param {Number} opts.sheetFormat.baseColWidth Defaults to 10. Specifies the number of characters of the maximum digit width of the normal style's font. This value does not include margin padding or extra padding for gridlines. It is only the number of characters.,\n     * @param {Number} opts.sheetFormat.defaultColWidth\n     * @param {Number} opts.sheetFormat.defaultRowHeight\n     * @param {Boolean} opts.sheetFormat.thickBottom 'True' if rows have a thick bottom border by default.\n     * @param {Boolean} opts.sheetFormat.thickTop 'True' if rows have a thick top border by default.\n     * @param {Object} opts.sheetProtection same as \"Protect Sheet\" in Review tab of Excel \n     * @param {Boolean} opts.sheetProtection.autoFilter True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.deleteColumns True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.deleteRows True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.formatCells True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.formatColumns True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.formatRows True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.insertColumns True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.insertHyperlinks True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.insertRows True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.objects True means that that user will be unable to modify this setting\n     * @param {String} opts.sheetProtection.password Password used to protect sheet\n     * @param {Boolean} opts.sheetProtection.pivotTables True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.scenarios True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.selectLockedCells True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.selectUnlockedCells True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.sheet True means that that user will be unable to modify this setting\n     * @param {Boolean} opts.sheetProtection.sort True means that that user will be unable to modify this setting\n     * @param {Object} opts.outline \n     * @param {Boolean} opts.outline.summaryBelow Flag indicating whether summary rows appear below detail in an outline, when applying an outline/grouping.\n     * @param {Boolean} opts.outline.summaryRight Flag indicating whether summary columns appear to the right of detail in an outline, when applying an outline/grouping.\n     * @returns {Worksheet}\n     */\n    function Worksheet(wb, name, opts) {\n        _classCallCheck(this, Worksheet);\n\n        this.wb = wb;\n        this.sheetId = this.wb.sheets.length + 1;\n        this.localSheetId = this.wb.sheets.length;\n        this.opts = _.merge({}, _.cloneDeep(wsDefaultParams), opts);\n        optsValidator(opts);\n\n        this.opts.sheetView.tabSelected = this.sheetId === 1 ? 1 : 0;\n        this.name = name ? name : 'Sheet ' + this.sheetId;\n        this.hasGroupings = false;\n        this.cols = {}; // Columns keyed by column, contains column properties\n        this.rows = {}; // Rows keyed by row, contains row properties and array of cellRefs\n        this.cells = {}; // Cells keyed by Excel ref\n        this.mergedCells = [];\n        this.lastUsedRow = 1;\n        this.lastUsedCol = 1;\n\n        // conditional formatting rules hashed by sqref\n        this.cfRulesCollection = new CfRulesCollection();\n        this.hyperlinkCollection = new HyperlinkCollection();\n        this.dataValidationCollection = new DataValidation.DataValidationCollection();\n        this.drawingCollection = new wsDrawing.DrawingCollection();\n    }\n\n    _createClass(Worksheet, [{\n        key: 'addConditionalFormattingRule',\n\n\n        /**\n         * @func Worksheet.addConditionalFormattingRule\n         * @param {String} sqref Text represetation of Cell range where the conditional formatting will take effect\n         * @param {Object} options Options for conditional formatting\n         * @param {String} options.type Type of conditional formatting\n         * @param {String} options.priority Priority level for this rule\n         * @param {String} options.formula Formula that returns nonzero or 0 value. If not 0 then rule will be applied\n         * @param {Style} options.style Style that should be applied if rule passes\n         * @returns {Worksheet}\n         */\n        value: function addConditionalFormattingRule(sqref, options) {\n            var style = options.style || this.wb.Style();\n            var dxf = this.wb.dxfCollection.add(style);\n            delete options.style;\n            options.dxfId = dxf.id;\n            this.cfRulesCollection.add(sqref, options);\n            return this;\n        }\n        /**\n         * @func Worksheet.addDataValidation\n         * @desc Add a data validation rule to the Worksheet\n         * @param {Object} opts Options for Data Validation rule\n         * @param {String} opts.sqref Required. Specifies range of cells to apply validate. i.e. \"A1:A100\"\n         * @param {Boolean} opts.allowBlank Allows cells to be empty\n         * @param {String} opts.errorStyle One of 'stop', 'warning', 'information'. You must specify an error string for this to take effect\n         * @param {String} opts.error Message to show on error\n         * @param {String} opts.errorTitle: String Title of message shown on error\n         * @param {Boolean} opts.showErrorMessage Defaults to true if error or errorTitle is set\n         * @param {String} opts.imeMode Restricts input to a specific set of characters. One of 'noControl', 'off', 'on', 'disabled', 'hiragana', 'fullKatakana', 'halfKatakana', 'fullAlpha', 'halfAlpha', 'fullHangul', 'halfHangul'\n         * @param {String} opts.operator Must be one of 'between', 'notBetween', 'equal', 'notEqual', 'lessThan', 'lessThanOrEqual', 'greaterThan', 'greaterThanOrEqual'\n         * @param {String} opts.prompt Message text of input prompt\n         * @param {String} opts.promptTitle Title of input prompt\n         * @param {Boolean} opts.showInputMessage Defaults to true if prompt or promptTitle is set\n         * @param {Boolean} opts.showDropDown A boolean value indicating whether to display a dropdown combo box for a list type data validation.\n         * @param {String} opts.type One of 'none', 'whole', 'decimal', 'list', 'date', 'time', 'textLength', 'custom'\n         * @param {Array.String} opts.formulas Minimum count 1, maximum count 2. Rules for validation\n         */\n\n    }, {\n        key: 'addDataValidation',\n        value: function addDataValidation(opts) {\n            var newValidation = this.dataValidationCollection.add(opts);\n            return newValidation;\n        }\n        /**\n         * @func Worksheet.generateRelsXML\n         * @desc When Workbook is being built, generate the XML that will go into the Worksheet .rels file\n         */\n\n    }, {\n        key: 'generateRelsXML',\n        value: function generateRelsXML() {\n            return xmlBuilder.relsXML(this);\n        }\n        /**\n         * @func Worksheet.generateXML\n         * @desc When Workbook is being built, generate the XML that will go into the Worksheet xml file \n         */\n\n    }, {\n        key: 'generateXML',\n        value: function generateXML() {\n            return xmlBuilder.sheetXML(this);\n        }\n    }, {\n        key: 'row',\n        value: function row(_row) {\n            return rowAccessor(this, _row);\n        }\n    }, {\n        key: 'column',\n        value: function column(col) {\n            return colAccessor(this, col);\n        }\n        /**\n         * @func Worksheet.addImage\n         * @param {Object} opts\n         * @param {String} opts.path File system path of image\n         * @param {String} opts.type Type of image. Currently only 'picture' is supported\n         * @param {Object} opts.position Position object for image\n         * @param {String} opts.position.type Type of positional anchor to use. One of 'absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'\n         * @param {Object} opts.position.from Object containg position of top left corner of image.  Used with oneCellAnchor and twoCellAchor types\n         * @param {Number} opts.position.from.col Left edge of image will align with left edge of this column\n         * @param {String} opts.position.from.colOff Offset from left edge of column\n         * @param {Number} opts.position.from.row Top edge of image will align with top edge of this row\n         * @param {String} opts.position.from.rowOff Offset from top edge of row\n         * @param {Object} opts.position.to Object containing position of bottom right corner of image\n         * @param {Number} opts.position.to.col Right edge of image will align with Left edge of this column\n         * @param {String} opts.position.to.colOff Offset of left edge of column\n         * @param {Number} opts.position.to.row Bottom edge of image will align with Top edge of this row\n         * @param {String} opts.position.to.rowOff Offset of top edge of row\n         * @param {String} opts.position.x X position of top left corner of image. Used with absoluteAchor type\n         * @param {String} opts.position.y Y position of top left corner of image\n         */\n\n    }, {\n        key: 'addImage',\n        value: function addImage(opts) {\n            opts = opts ? opts : {};\n            var mediaID = this.wb.mediaCollection.add(opts.path);\n            var newImage = this.drawingCollection.add(opts);\n            newImage.id = mediaID;\n\n            return newImage;\n        }\n    }, {\n        key: 'relationships',\n        get: function get() {\n            var rels = [];\n            this.hyperlinkCollection.links.forEach(function (l) {\n                rels.push(l);\n            });\n            if (!this.drawingCollection.isEmpty) {\n                rels.push('drawing');\n            }\n            return rels;\n        }\n    }, {\n        key: 'columnCount',\n        get: function get() {\n            return Math.max.apply(Math, Object.keys(this.cols));\n        }\n    }, {\n        key: 'rowCount',\n        get: function get() {\n            return Math.max.apply(Math, Object.keys(this.rows));\n        }\n    }, {\n        key: 'cell',\n        get: function get() {\n            return cellAccessor.bind(this);\n        }\n    }]);\n\n    return Worksheet;\n}();\n\nmodule.exports = Worksheet;\n//# sourceMappingURL=worksheet.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/cf/cf_rules_collection.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CfRule = require('./cf_rule');\n\n// -----------------------------------------------------------------------------\n\nvar CfRulesCollection = function () {\n    // §18.3.1.18 conditionalFormatting (Conditional Formatting)\n    function CfRulesCollection() {\n        _classCallCheck(this, CfRulesCollection);\n\n        // rules are indexed by cell refs\n        this.rulesBySqref = {};\n    }\n\n    _createClass(CfRulesCollection, [{\n        key: 'add',\n        value: function add(sqref, ruleConfig) {\n            var rules = this.rulesBySqref[sqref] || [];\n            var newRule = new CfRule(ruleConfig);\n            rules.push(newRule);\n            this.rulesBySqref[sqref] = rules;\n            return this;\n        }\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var _this = this;\n\n            Object.keys(this.rulesBySqref).forEach(function (sqref) {\n                var thisEle = ele.ele('conditionalFormatting').att('sqref', sqref);\n                _this.rulesBySqref[sqref].forEach(function (rule) {\n                    rule.addToXMLele(thisEle);\n                });\n            });\n        }\n    }, {\n        key: 'count',\n        get: function get() {\n            return Object.keys(this.rulesBySqref).length;\n        }\n    }]);\n\n    return CfRulesCollection;\n}();\n\nmodule.exports = CfRulesCollection;\n//# sourceMappingURL=cf_rules_collection.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/cf/cf_rule.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _ = require('lodash');\nvar CF_RULE_TYPES = require('./cf_rule_types');\n\nvar CfRule = function () {\n    // §18.3.1.10 cfRule (Conditional Formatting Rule)\n    function CfRule(ruleConfig) {\n        var _this = this;\n\n        _classCallCheck(this, CfRule);\n\n        this.type = ruleConfig.type;\n        this.priority = ruleConfig.priority;\n        this.formula = ruleConfig.formula;\n        this.dxfId = ruleConfig.dxfId;\n\n        var foundType = CF_RULE_TYPES[this.type];\n\n        if (!foundType) {\n            throw new TypeError('\"' + this.type + '\" is not a valid conditional formatting rule type');\n        }\n\n        if (!foundType.supported) {\n            throw new TypeError('Conditional formatting type \"' + this.type + '\" is not yet supported');\n        }\n\n        var missingProps = _.reduce(foundType.requiredProps, function (list, prop) {\n            if (_.get(_this, prop, null) === null) {\n                list.push(prop);\n            }\n            return list;\n        }, []);\n\n        if (missingProps.length) {\n            throw new TypeError('Conditional formatting rule is missing required properties: ' + missingProps.join(', '));\n        }\n    }\n\n    _createClass(CfRule, [{\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var thisRule = ele.ele('cfRule');\n            if (this.type !== undefined) {\n                thisRule.att('type', this.type);\n            }\n            if (this.dxfId !== undefined) {\n                thisRule.att('dxfId', this.dxfId);\n            }\n            if (this.priority !== undefined) {\n                thisRule.att('priority', this.priority);\n            }\n\n            if (this.formula !== undefined) {\n                thisRule.ele('formula').text(this.formula);\n            }\n            thisRule.up();\n        }\n    }]);\n\n    return CfRule;\n}();\n\nmodule.exports = CfRule;\n//# sourceMappingURL=cf_rule.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/cf/cf_rule_types.js":"'use strict';\n\n// Types from xlsx spec:\n//     http://download.microsoft.com/download/D/3/3/D334A189-E51B-47FF-B0E8-C0479AFB0E3C/[MS-XLSX].pdf\n\nmodule.exports = {\n    cellIs: {\n        supported: false\n    },\n    expression: {\n        supported: true,\n        requiredProps: ['dxfId', 'priority', 'formula']\n    },\n    colorScale: {\n        supported: false\n    },\n    dataBar: {\n        supported: false\n    },\n    iconSet: {\n        supported: false\n    },\n    containsText: {\n        supported: false\n    },\n    notContainsText: {\n        supported: false\n    },\n    beginsWith: {\n        supported: false\n    },\n    endsWith: {\n        supported: false\n    },\n    containsBlanks: {\n        supported: false\n    },\n    notContainsBlanks: {\n        supported: false\n    },\n    containsErrors: {\n        supported: false\n    },\n    notContainsErrors: {\n        supported: false\n    }\n};\n//# sourceMappingURL=cf_rule_types.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/cell/index.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _ = require('lodash');\nvar Cell = require('./cell.js');\nvar Row = require('../row/row.js');\nvar Column = require('../column/column.js');\nvar Style = require('../style/style.js');\nvar utils = require('../utils.js');\nvar util = require('util');\n\nfunction stringSetter(val) {\n    var _this = this;\n\n    var logger = this.ws.wb.logger;\n    var chars = void 0,\n        chr = void 0;\n    chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n    chr = val.match(chars);\n    if (chr) {\n        logger.warn('Invalid Character for XML \"' + chr + '\" in string \"' + val + '\"');\n        val = val.replace(chr, '');\n    }\n\n    if (typeof val !== 'string') {\n        logger.warn('Value sent to String function of cells %s was not a string, it has type of %s', JSON.stringify(this.excelRefs), typeof val === 'undefined' ? 'undefined' : _typeof(val));\n        val = '';\n    }\n\n    val = val.toString();\n    // Remove Control characters, they aren't understood by xmlbuilder\n    val = val.replace(/[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/, '');\n\n    if (!this.merged) {\n        this.cells.forEach(function (c) {\n            c.string(_this.ws.wb.getStringIndex(val));\n        });\n    } else {\n        var c = this.cells[0];\n        c.string(this.ws.wb.getStringIndex(val));\n    }\n    return this;\n}\n\nfunction complexStringSetter(val) {\n    var _this2 = this;\n\n    if (!this.merged) {\n        this.cells.forEach(function (c) {\n            c.string(_this2.ws.wb.getStringIndex(val));\n        });\n    } else {\n        var c = this.cells[0];\n        c.string(this.ws.wb.getStringIndex(val));\n    }\n    return this;\n}\n\nfunction numberSetter(val) {\n    if (val === undefined || parseFloat(val) !== val) {\n        throw new TypeError(util.format('Value sent to Number function of cells %s was not a number, it has type of %s and value of %s', JSON.stringify(this.excelRefs), typeof val === 'undefined' ? 'undefined' : _typeof(val), val));\n    }\n    val = parseFloat(val);\n\n    if (!this.merged) {\n        this.cells.forEach(function (c, i) {\n            c.number(val);\n        });\n    } else {\n        var c = this.cells[0];\n        c.number(val);\n    }\n    return this;\n}\n\nfunction booleanSetter(val) {\n    if (val === undefined || typeof (val.toString().toLowerCase() === 'true' || (val.toString().toLowerCase() === 'false' ? false : val)) !== 'boolean') {\n        throw new TypeError(util.format('Value sent to Bool function of cells %s was not a bool, it has type of %s and value of %s', JSON.stringify(this.excelRefs), typeof val === 'undefined' ? 'undefined' : _typeof(val), val));\n    }\n    val = val.toString().toLowerCase() === 'true';\n\n    if (!this.merged) {\n        this.cells.forEach(function (c, i) {\n            c.bool(val.toString());\n        });\n    } else {\n        var c = this.cells[0];\n        c.bool(val.toString());\n    }\n    return this;\n}\n\nfunction formulaSetter(val) {\n    if (typeof val !== 'string') {\n        throw new TypeError(util.format('Value sent to Formula function of cells %s was not a string, it has type of %s', JSON.stringify(this.excelRefs), typeof val === 'undefined' ? 'undefined' : _typeof(val)));\n    }\n    if (this.merged !== true) {\n        this.cells.forEach(function (c, i) {\n            c.formula(val);\n        });\n    } else {\n        var c = this.cells[0];\n        c.formula(val);\n    }\n\n    return this;\n}\n\nfunction dateSetter(val) {\n    var thisDate = new Date(val);\n    if (isNaN(thisDate.getTime())) {\n        throw new TypeError(util.format('Invalid date sent to date function of cells. %s could not be converted to a date.', val));\n    }\n    if (this.merged !== true) {\n        this.cells.forEach(function (c, i) {\n            c.date(thisDate);\n        });\n    } else {\n        var c = this.cells[0];\n        c.date(thisDate);\n    }\n    return styleSetter.bind(this)({\n        numberFormat: '[$-409]' + this.ws.wb.opts.dateFormat\n    });\n}\n\nfunction styleSetter(val) {\n    var _this3 = this;\n\n    var thisStyle = void 0;\n    if (val instanceof Style) {\n        thisStyle = val.toObject();\n    } else if (val instanceof Object) {\n        thisStyle = val;\n    } else {\n        throw new TypeError(util.format('Parameter sent to Style function must be an instance of a Style or a style configuration object'));\n    }\n\n    var borderEdges = {};\n    if (thisStyle.border && thisStyle.border.outline) {\n        borderEdges.left = this.firstCol;\n        borderEdges.right = this.lastCol;\n        borderEdges.top = this.firstRow;\n        borderEdges.bottom = this.lastRow;\n    }\n\n    this.cells.forEach(function (c) {\n        if (thisStyle.border && thisStyle.border.outline) {\n            var thisCellsBorder = {};\n            if (c.row === borderEdges.top && thisStyle.border.top) {\n                thisCellsBorder.top = thisStyle.border.top;\n            }\n            if (c.row === borderEdges.bottom && thisStyle.border.bottom) {\n                thisCellsBorder.bottom = thisStyle.border.bottom;\n            }\n            if (c.col === borderEdges.left && thisStyle.border.left) {\n                thisCellsBorder.left = thisStyle.border.left;\n            }\n            if (c.col === borderEdges.right && thisStyle.border.right) {\n                thisCellsBorder.right = thisStyle.border.right;\n            }\n            thisStyle.border = thisCellsBorder;\n        }\n\n        if (c.s === 0) {\n            var thisCellStyle = _this3.ws.wb.createStyle(thisStyle);\n            c.style(thisCellStyle.ids.cellXfs);\n        } else {\n            var curStyle = _this3.ws.wb.styles[c.s];\n            var newStyleOpts = _.merge({}, curStyle.toObject(), thisStyle);\n            var mergedStyle = _this3.ws.wb.createStyle(newStyleOpts);\n            c.style(mergedStyle.ids.cellXfs);\n        }\n    });\n    return this;\n}\n\nfunction hyperlinkSetter(url, displayStr, tooltip) {\n    var _this4 = this;\n\n    this.excelRefs.forEach(function (ref) {\n        displayStr = typeof displayStr === 'string' ? displayStr : url;\n        _this4.ws.hyperlinkCollection.add({\n            location: url,\n            display: displayStr,\n            tooltip: tooltip,\n            ref: ref\n        });\n    });\n    stringSetter.bind(this)(displayStr);\n    return styleSetter.bind(this)({\n        font: {\n            color: 'Blue',\n            underline: true\n        }\n    });\n}\n\nfunction mergeCells(cellBlock) {\n    var excelRefs = cellBlock.excelRefs;\n    if (excelRefs instanceof Array && excelRefs.length > 0) {\n        (function () {\n            excelRefs.sort(utils.sortCellRefs);\n\n            var cellRange = excelRefs[0] + ':' + excelRefs[excelRefs.length - 1];\n            var rangeCells = excelRefs;\n\n            var okToMerge = true;\n            cellBlock.ws.mergedCells.forEach(function (cr) {\n                // Check to see if currently merged cells contain cells in new merge request\n                var curCells = utils.getAllCellsInExcelRange(cr);\n                var intersection = utils.arrayIntersectSafe(rangeCells, curCells);\n                if (intersection.length > 0) {\n                    okToMerge = false;\n                    cellBlock.ws.wb.logger.error('Invalid Range for: ' + cellRange + '. Some cells in this range are already included in another merged cell range: ' + cr + '.');\n                }\n            });\n            if (okToMerge) {\n                cellBlock.ws.mergedCells.push(cellRange);\n            }\n        })();\n    } else {\n        throw new TypeError(util.format('excelRefs variable sent to mergeCells function must be an array with length > 0'));\n    }\n}\n\n/**\n * @class cellBlock\n */\n\nvar cellBlock = function () {\n    function cellBlock() {\n        _classCallCheck(this, cellBlock);\n\n        this.ws;\n        this.cells = [];\n        this.excelRefs = [];\n        this.merged = false;\n    }\n\n    _createClass(cellBlock, [{\n        key: 'matrix',\n        get: function get() {\n            var matrix = [];\n            var tmpObj = {};\n            this.cells.forEach(function (c) {\n                if (!tmpObj[c.row]) {\n                    tmpObj[c.row] = [];\n                }\n                tmpObj[c.row].push(c);\n            });\n            var rows = Object.keys(tmpObj);\n            rows.forEach(function (r) {\n                tmpObj[r].sort(function (a, b) {\n                    return a.col - b.col;\n                });\n                matrix.push(tmpObj[r]);\n            });\n            return matrix;\n        }\n    }, {\n        key: 'firstRow',\n        get: function get() {\n            var firstRow = void 0;\n            this.cells.forEach(function (c) {\n                if (c.row < firstRow || firstRow === undefined) {\n                    firstRow = c.row;\n                }\n            });\n            return firstRow;\n        }\n    }, {\n        key: 'lastRow',\n        get: function get() {\n            var lastRow = void 0;\n            this.cells.forEach(function (c) {\n                if (c.row > lastRow || lastRow === undefined) {\n                    lastRow = c.row;\n                }\n            });\n            return lastRow;\n        }\n    }, {\n        key: 'firstCol',\n        get: function get() {\n            var firstCol = void 0;\n            this.cells.forEach(function (c) {\n                if (c.col < firstCol || firstCol === undefined) {\n                    firstCol = c.col;\n                }\n            });\n            return firstCol;\n        }\n    }, {\n        key: 'lastCol',\n        get: function get() {\n            var lastCol = void 0;\n            this.cells.forEach(function (c) {\n                if (c.col > lastCol || lastCol === undefined) {\n                    lastCol = c.col;\n                }\n            });\n            return lastCol;\n        }\n    }]);\n\n    return cellBlock;\n}();\n\n/**\n * Module repesenting a Cell Accessor\n * @alias Worksheet.cell\n * @namespace\n * @func Worksheet.cell\n * @desc Access a range of cells in order to manipulate values\n * @param {Number} row1 Row of top left cell\n * @param {Number} col1 Column of top left cell\n * @param {Number} row2 Row of bottom right cell (optional)\n * @param {Number} col2 Column of bottom right cell (optional)\n * @param {Boolean} isMerged Merged the cell range into a single cell\n * @returns {cellBlock}\n */\n\n\nfunction cellAccessor(row1, col1, row2, col2, isMerged) {\n    var theseCells = new cellBlock();\n    theseCells.ws = this;\n\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n\n    if (row2 > this.lastUsedRow) {\n        this.lastUsedRow = row2;\n    }\n\n    if (col2 > this.lastUsedCol) {\n        this.lastUsedCol = col2;\n    }\n\n    for (var r = row1; r <= row2; r++) {\n        for (var c = col1; c <= col2; c++) {\n            var ref = '' + utils.getExcelAlpha(c) + r;\n            if (!this.cells[ref]) {\n                this.cells[ref] = new Cell(r, c);\n            }\n            if (!this.rows[r]) {\n                this.rows[r] = new Row(r, this);\n            }\n            if (this.rows[r].cellRefs.indexOf(ref) < 0) {\n                this.rows[r].cellRefs.push(ref);\n            }\n\n            theseCells.cells.push(this.cells[ref]);\n            theseCells.excelRefs.push(ref);\n        }\n    }\n    if (isMerged) {\n        theseCells.merged = true;\n        mergeCells(theseCells);\n    }\n\n    return theseCells;\n}\n\n/**\n * @alias cellBlock.string\n * @func cellBlock.string\n * @param {String} val Value of String\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.string = function (val) {\n    if (val instanceof Array) {\n        return complexStringSetter.bind(this)(val);\n    } else {\n        return stringSetter.bind(this)(val);\n    }\n};\n\n/**\n * @alias cellBlock.style\n * @func cellBlock.style\n * @param {Object} style One of a Style instance or an object with Style parameters\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.style = styleSetter;\n\n/**\n * @alias cellBlock.number\n * @func cellBlock.number\n * @param {Number} val Value of Number\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.number = numberSetter;\n\n/**\n * @alias cellBlock.bool\n * @func cellBlock.bool\n * @param {Boolean} val Value of Boolean\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.bool = booleanSetter;\n\n/**\n * @alias cellBlock.formula\n * @func cellBlock.formula\n * @param {String} val Excel style formula as string\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.formula = formulaSetter;\n\n/**\n * @alias cellBlock.date\n * @func cellBlock.date\n * @param {Date} val Value of Date\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.date = dateSetter;\n\n/**\n * @alias cellBlock.link\n * @func cellBlock.link\n * @param {String} url Value of Hyperlink URL\n * @param {String} displayStr Value of String representation of URL\n * @param {String} tooltip Value of text to display as hover\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.link = hyperlinkSetter;\n\nmodule.exports = cellAccessor;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/cell/cell.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../utils.js');\n\n// §18.3.1.4 c (Cell)\n\nvar Cell = function () {\n    /**\n     * Create an Excel Cell\n     * @private\n     * @param {Number} row Row of cell. \n     * @param {Number} col Column of cell\n     */\n    function Cell(row, col) {\n        _classCallCheck(this, Cell);\n\n        this.r = '' + utils.getExcelAlpha(col) + row; // 'r' attribute\n        this.s = 0; // 's' attribute refering to style index\n        this.t = null; // 't' attribute stating Cell data type - §18.18.11 ST_CellType (Cell Type)\n        this.f = null; // 'f' child element used for formulas\n        this.v = null; // 'v' child element for values\n        this.row = row; // used internally throughout code. Does not go into XML\n        this.col = col; // used internally throughout code. Does not go into XML\n    }\n\n    _createClass(Cell, [{\n        key: 'string',\n        value: function string(index) {\n            this.t = 's';\n            this.v = index;\n            this.f = null;\n        }\n    }, {\n        key: 'number',\n        value: function number(val) {\n            this.t = 'n';\n            this.v = val;\n            this.f = null;\n        }\n    }, {\n        key: 'formula',\n        value: function formula(_formula) {\n            this.t = null;\n            this.v = null;\n            this.f = _formula;\n        }\n    }, {\n        key: 'bool',\n        value: function bool(val) {\n            this.t = 'b';\n            this.v = val;\n            this.f = null;\n        }\n    }, {\n        key: 'date',\n        value: function date(dt) {\n            this.t = null;\n            this.v = utils.getExcelTS(dt);\n            this.f = null;\n        }\n    }, {\n        key: 'style',\n        value: function style(sId) {\n            this.s = sId;\n        }\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            if (this.v === null && this.is === null) {\n                return;\n            }\n\n            var cEle = ele.ele('c').att('r', this.r).att('s', this.s);\n            if (this.t !== null) {\n                cEle.att('t', this.t);\n            }\n            if (this.f !== null) {\n                cEle.ele('f').txt(this.f).up();\n            }\n            if (this.v !== null) {\n                cEle.ele('v').txt(this.v).up();\n            }\n            cEle.up();\n        }\n    }]);\n\n    return Cell;\n}();\n\nmodule.exports = Cell;\n//# sourceMappingURL=cell.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/row/row.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../utils.js');\nvar _ = require('lodash');\n\nvar Row = function () {\n    /**\n     * Element representing an Excel Row\n     * @param {Number} row Row of cell\n     * @param {Worksheet} Worksheet that contains row\n     * @property {Worksheet} ws Worksheet that contains the specified Row\n     * @property {Array.String} cellRefs Array of excel cell references\n     * @property {Boolean} collapsed States whether row is collapsed when grouped\n     * @property {Boolean} customFormat States whether the row has a custom format\n     * @property {Boolean} customHeight States whether the row's height is different than default\n     * @property {Boolean} hidden States whether the row is hidden\n     * @property {Number} ht Height of the row (internal property)\n     * @property {Number} outlineLevel Grouping level of row\n     * @property {Number} r Row index\n     * @property {Number} s Style index\n     * @property {Boolean} thickBot States whether row has a thick bottom border\n     * @property {Boolean} thickTop States whether row has a thick top border\n     * @property {Number} height Height of row\n     * @property {String} spans String representation of excel cell range i.e. A1:A10\n     * @property {Number} firstColumn Index of the first column of the row containg data\n     * @property {String} firstColumnAlpha Alpha representation of the first column of the row containing data\n     * @property {Number} lastColumn Index of the last column of the row cotaining data\n     * @property {String} lastColumnAlpha Alpha representation of the last column of the row containing data\n     */\n    function Row(row, ws) {\n        _classCallCheck(this, Row);\n\n        this.ws = ws;\n        this.cellRefs = [];\n        this.collapsed = null;\n        this.customFormat = null;\n        this.customHeight = null;\n        this.hidden = null;\n        this.ht = null;\n        this.outlineLevel = null;\n        this.r = row;\n        this.s = null;\n        this.thickBot = null;\n        this.thickTop = null;\n    }\n\n    _createClass(Row, [{\n        key: 'setHeight',\n\n\n        /**\n         * @alias Row.setHeight\n         * @desc Sets the height of a row\n         * @func Row.setHeight\n         * @param {Number} val New Height of row\n         * @returns {Row} Excel Row with attached methods\n         */\n        value: function setHeight(h) {\n            if (typeof h === 'number') {\n                this.ht = h;\n                this.customHeight = true;\n            } else {\n                throw new TypeError('Row height must be a number');\n            }\n            return this;\n        }\n    }, {\n        key: 'filter',\n\n\n        /**\n         * @alias Row.filter\n         * @desc Add autofilter dropdowns to the items of the row\n         * @func Row.filter\n         * @param {Object} opts Object containing options for the fitler. \n         * @param {Number} opts.lastRow Last row in which the filter show effect filtered results (optional)\n         * @param {Number} opts.startCol First column that a filter dropdown should be added (optional)\n         * @param {Number} opts.lastCol Last column that a filter dropdown should be added (optional)\n         * @param {Array.DefinedName} opts.filters Array of filter paramaters\n         * @returns {Row} Excel Row with attached methods\n         */\n        value: function filter(opts) {\n\n            var theseOpts = opts instanceof Object ? opts : {};\n            var theseFilters = opts.filters instanceof Array ? opts.filters : [];\n\n            var o = this.ws.opts.autoFilter;\n            o.startRow = this.r;\n            if (typeof theseOpts.lastRow === 'number') {\n                o.endRow = theseOpts.lastRow;\n            }\n\n            if (typeof theseOpts.firstColumn === 'number' && typeof theseOpts.lastColumn === 'number') {\n                o.startCol = theseOpts.firstColumn;\n                o.endCol = theseOpts.lastColumn;\n            }\n\n            // Programmer Note: DefinedName class is added to workbook during workbook write process for filters\n\n            this.ws.opts.autoFilter.filters = theseFilters;\n        }\n\n        /**\n         * @alias Row.hide\n         * @desc Hides the row\n         * @func Row.hide\n         * @returns {Row} Excel Row with attached methods\n         */\n\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this.hidden = true;\n            return this;\n        }\n\n        /**\n         * @alias Row.group\n         * @desc Hides the row\n         * @func Row.group\n         * @param {Number} level Group level of row\n         * @param {Boolean} collapsed States whether group should be collapsed or expanded by default\n         * @returns {Row} Excel Row with attached methods\n         */\n\n    }, {\n        key: 'group',\n        value: function group(level, collapsed) {\n            if (parseInt(level) === level) {\n                this.outlineLevel = level;\n            } else {\n                throw new TypeError('Row group level must be a positive integer');\n            }\n\n            if (collapsed === undefined) {\n                return this;\n            }\n\n            if (typeof collapsed === 'boolean') {\n                this.collapsed = collapsed;\n                this.hidden = collapsed;\n            } else {\n                throw new TypeError('Row group collapse flag must be a boolean');\n            }\n\n            return this;\n        }\n\n        /**\n         * @alias Row.freeze\n         * @desc Creates Worksheet panes and freezes the top pane\n         * @func Row.freeze\n         * @param {Number} jumpTo Row that the bottom pane should be scrolled to by default\n         * @returns {Row} Excel Row with attached methods\n         */\n\n    }, {\n        key: 'freeze',\n        value: function freeze(jumpTo) {\n            var o = this.ws.opts.sheetView.pane;\n            jumpTo = typeof jumpTo === 'number' && jumpTo > this.r ? jumpTo : this.r + 1;\n            o.state = 'frozen';\n            o.ySplit = this.r;\n            o.activePane = 'bottomRight';\n            o.xSplit === null ? o.topLeftCell = utils.getExcelCellRef(jumpTo, 1) : o.topLeftCell = utils.getExcelCellRef(jumpTo, utils.getExcelRowCol(o.topLeftCell).col);\n            return this;\n        }\n    }, {\n        key: 'height',\n        set: function set(h) {\n            if (typeof h === 'number') {\n                this.ht = h;\n                this.customHeight = true;\n            } else {\n                throw new TypeError('Row height must be a number');\n            }\n            return this.ht;\n        },\n        get: function get() {\n            return this.ht;\n        }\n    }, {\n        key: 'spans',\n        get: function get() {\n            if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n                return utils.getExcelRowCol(this.cellRefs[0]).row + ':' + utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).row;\n            } else {\n                return this.r + ':' + this.r;\n            }\n        }\n    }, {\n        key: 'firstColumn',\n        get: function get() {\n            if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n                return utils.getExcelRowCol(this.cellRefs[0]).col;\n            } else {\n                return 1;\n            }\n        }\n    }, {\n        key: 'firstColumnAlpha',\n        get: function get() {\n            if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n                return utils.getExcelAlpha(utils.getExcelRowCol(this.cellRefs[0]).col);\n            } else {\n                return 'A';\n            }\n        }\n    }, {\n        key: 'lastColumn',\n        get: function get() {\n            if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n                return utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).col;\n            } else {\n                return 1;\n            }\n        }\n    }, {\n        key: 'lastColumnAlpha',\n        get: function get() {\n            if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n                return utils.getExcelAlpha(utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).col);\n            } else {\n                return 'A';\n            }\n        }\n    }]);\n\n    return Row;\n}();\n\nmodule.exports = Row;\n//# sourceMappingURL=row.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/column/column.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../utils.js');\nvar _ = require('lodash');\n\nvar Column = function () {\n    /**\n     * Element representing an Excel Column\n     * @param {Number} col Column of cell\n     * @param {Worksheet} Worksheet that contains column\n     * @property {Worksheet} ws Worksheet that contains the specified Column\n     * @property {Boolean} collapsed States whether the column is collapsed if part of a group\n     * @property {Boolean} customWidth States whether or not the column as a width that is not default\n     * @property {Boolean} hidden States whether or not the specified column is hiddent\n     * @property {Number} max The greatest column if part of a range\n     * @property {Number} min The least column if part of a range\n     * @property {Number} outlineLevel The grouping leve of the Column\n     * @property {Number} style ID of style\n     * @property {Number} width Width of the Column\n     */\n    function Column(col, ws) {\n        _classCallCheck(this, Column);\n\n        this.ws = ws;\n        this.collapsed = null;\n        this.customWidth = null;\n        this.hidden = null;\n        this.max = col;\n        this.min = col;\n        this.outlineLevel = null;\n        this.style = null;\n        this.colWidth = null;\n    }\n\n    _createClass(Column, [{\n        key: 'setWidth',\n\n\n        /**\n         * @alias Column.setWidth\n         * @desc Sets teh width of a column\n         * @func Column.setWidth\n         * @param {Number} val New Width of column\n         * @returns {Column} Excel Column with attached methods\n         */\n        value: function setWidth(w) {\n            if (parseInt(w) === w) {\n                this.colWidth = w;\n                this.customWidth = true;\n            } else {\n                throw new TypeError('Column width must be a positive integer');\n            }\n            return this;\n        }\n\n        /**\n         * @alias Column.hide\n         * @desc Sets a Column to be hidden\n         * @func Column.hide\n         * @returns {Column} Excel Column with attached methods\n         */\n\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this.hidden = true;\n            return this;\n        }\n\n        /**\n         * @alias Column.group\n         * @desc Adds column to the specified group\n         * @func Column.group\n         * @param {Number} level Level of excel grouping\n         * @param {Boolean} collapsed States wheter column grouping level should be collapsed by default\n         * @returns {Column} Excel Column with attached methods\n         */\n\n    }, {\n        key: 'group',\n        value: function group(level, collapsed) {\n            if (parseInt(level) === level) {\n                this.outlineLevel = level;\n            } else {\n                throw new TypeError('Column group level must be a positive integer');\n            }\n\n            if (collapsed === undefined) {\n                return this;\n            }\n\n            if (typeof collapsed === 'boolean') {\n                this.collapsed = collapsed;\n                this.hidden = collapsed;\n            } else {\n                throw new TypeError('Column group collapse flag must be a boolean');\n            }\n\n            return this;\n        }\n\n        /**\n         * @alias Column.freeze\n         * @desc Creates an Excel pane at the specificed column and Freezes that column from scolling\n         * @func Column.freeze\n         * @param {Number} jumptTo Specifies the column that the active pane will be scrolled to by default\n         * @returns {Column} Excel Column with attached methods\n         */\n\n    }, {\n        key: 'freeze',\n        value: function freeze(jumpTo) {\n            var o = this.ws.opts.sheetView.pane;\n            jumpTo = typeof jumpTo === 'number' && jumpTo > this.min ? jumpTo : this.min + 1;\n            o.state = 'frozen';\n            o.xSplit = this.min;\n            o.activePane = 'bottomRight';\n            o.ySplit === null ? o.topLeftCell = utils.getExcelCellRef(1, jumpTo) : o.topLeftCell = utils.getExcelCellRef(utils.getExcelRowCol(o.topLeftCell).row, jumpTo);\n            return this;\n        }\n    }, {\n        key: 'width',\n        get: function get() {\n            return this.colWidth;\n        },\n        set: function set(w) {\n            if (parseInt(w) === w) {\n                this.colWidth = w;\n                this.customWidth = true;\n            } else {\n                throw new TypeError('Column width must be a positive integer');\n            }\n            return this.colWidth;\n        }\n    }]);\n\n    return Column;\n}();\n\nmodule.exports = Column;\n//# sourceMappingURL=column.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/style.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../utils.js');\nvar _ = require('lodash');\n\nvar Alignment = require('./classes/alignment.js');\nvar Border = require('./classes/border.js');\nvar Fill = require('./classes/fill.js');\nvar Font = require('./classes/font.js');\nvar NumberFormat = require('./classes/numberFormat.js');\n\nvar _getFontId = function _getFontId(wb, font) {\n\n    // Create the Font and lookup key\n    font = _.merge({}, wb.opts.defaultFont, font);\n    var thisFont = new Font(font);\n    var lookupKey = JSON.stringify(thisFont.toObject());\n\n    // Find an existing entry, creating a new one if it does not exist\n    var id = wb.styleDataLookup.fonts[lookupKey];\n    if (id === undefined) {\n        id = wb.styleData.fonts.push(thisFont) - 1;\n        wb.styleDataLookup.fonts[lookupKey] = id;\n    }\n\n    return id;\n};\n\nvar _getFillId = function _getFillId(wb, fill) {\n    if (fill === undefined) {\n        return null;\n    }\n\n    // Create the Fill and lookup key\n    var thisFill = new Fill(fill);\n    var lookupKey = JSON.stringify(thisFill.toObject());\n\n    // Find an existing entry, creating a new one if it does not exist\n    var id = wb.styleDataLookup.fills[lookupKey];\n    if (id === undefined) {\n        id = wb.styleData.fills.push(thisFill) - 1;\n        wb.styleDataLookup.fills[lookupKey] = id;\n    }\n\n    return id;\n};\n\nvar _getBorderId = function _getBorderId(wb, border) {\n    if (border === undefined) {\n        return null;\n    }\n\n    // Create the Border and lookup key\n    var thisBorder = new Border(border);\n    var lookupKey = JSON.stringify(thisBorder.toObject());\n\n    // Find an existing entry, creating a new one if it does not exist\n    var id = wb.styleDataLookup.borders[lookupKey];\n    if (id === undefined) {\n        id = wb.styleData.borders.push(thisBorder) - 1;\n        wb.styleDataLookup.borders[lookupKey] = id;\n    }\n\n    return id;\n};\n\nvar _getNumFmt = function _getNumFmt(wb, val) {\n    var fmt = void 0;\n    wb.styleData.numFmts.forEach(function (f) {\n        if (_.isEqual(f.formatCode, val)) {\n            fmt = f;\n        }\n    });\n\n    if (fmt === undefined) {\n        var fmtId = wb.styleData.numFmts.length + 164;\n        fmt = new NumberFormat(val);\n        fmt.numFmtId = fmtId;\n        wb.styleData.numFmts.push(fmt);\n    }\n\n    return fmt;\n};\n\n/*\n    Style Opts\n    {\n        alignment: { // §18.8.1\n            horizontal: ['center', 'centerContinuous', 'distributed', 'fill', 'general', 'justify', 'left', 'right'],\n            indent: integer, // Number of spaces to indent = indent value * 3\n            justifyLastLine: boolean,\n            readingOrder: ['contextDependent', 'leftToRight', 'rightToLeft'], \n            relativeIndent: integer, // number of additional spaces to indent\n            shrinkToFit: boolean,\n            textRotation: integer, // number of degrees to rotate text counter-clockwise\n            vertical: ['bottom', 'center', 'distributed', 'justify', 'top'],\n            wrapText: boolean\n        },\n        font: { // §18.8.22\n            bold: boolean,\n            charset: integer,\n            color: string,\n            condense: boolean,\n            extend: boolean,\n            family: string,\n            italics: boolean,\n            name: string,\n            outline: boolean,\n            scheme: string, // §18.18.33 ST_FontScheme (Font scheme Styles)\n            shadow: boolean,\n            strike: boolean,\n            size: integer,\n            underline: boolean,\n            vertAlign: string // §22.9.2.17 ST_VerticalAlignRun (Vertical Positioning Location)\n        },\n        border: { // §18.8.4 border (Border)\n            left: {\n                style: string,\n                color: string\n            },\n            right: {\n                style: string,\n                color: string\n            },\n            top: {\n                style: string,\n                color: string\n            },\n            bottom: {\n                style: string,\n                color: string\n            },\n            diagonal: {\n                style: string,\n                color: string\n            },\n            diagonalDown: boolean,\n            diagonalUp: boolean,\n            outline: boolean\n        },\n        fill: { // §18.8.20 fill (Fill)\n            type: 'pattern',\n            patternType: 'solid',\n            color: 'Yellow'\n        },\n        numberFormat: integer or string // §18.8.30 numFmt (Number Format)\n    }\n*/\n\nvar Style = function () {\n    function Style(wb, opts) {\n        _classCallCheck(this, Style);\n\n        /**\n         * Excel Style object\n         * @class Style\n         * @desc Style object for formatting Excel Cells\n         * @param {Workbook} wb Excel Workbook object\n         * @param {Object} opts Options for style\n         * @param {Object} opts.alignment Options for creating an Alignment instance\n         * @param {Object} opts.font Options for creating a Font instance\n         * @param {Object} opts.border Options for creating a Border instance\n         * @param {Object} opts.fill Options for creating a Fill instance\n         * @param {String} opts.numberFormat\n         * @property {Alignment} alignment Alignment instance associated with Style\n         * @property {Border} border Border instance associated with Style\n         * @property {Number} borderId ID of Border instance in the Workbook\n         * @property {Fill} fill Fill instance associated with Style\n         * @property {Number} fillId ID of Fill instance in the Workbook\n         * @property {Font} font Font instance associated with Style\n         * @property {Number} fontId ID of Font instance in the Workbook\n         * @property {String} numberFormat String represenation of the way a number should be formatted\n         * @property {Number} xf XF id of the Style in the Workbook\n         * @returns {Style} \n         */\n        opts = opts ? opts : {};\n\n        if (opts.alignment !== undefined) {\n            this.alignment = new Alignment(opts.alignment);\n        }\n\n        if (opts.border !== undefined) {\n            this.borderId = _getBorderId(wb, opts.border); // attribute 0 based index\n            this.border = wb.styleData.borders[this.borderId];\n        }\n        if (opts.fill !== undefined) {\n            this.fillId = _getFillId(wb, opts.fill); // attribute 0 based index\n            this.fill = wb.styleData.fills[this.fillId];\n        }\n\n        if (opts.font !== undefined) {\n            this.fontId = _getFontId(wb, opts.font); // attribute 0 based index\n            this.font = wb.styleData.fonts[this.fontId];\n        }\n\n        if (opts.numberFormat !== undefined) {\n            if (typeof opts.numberFormat === 'number' && opts.numberFormat <= 164) {\n                this.numFmtId = opts.numberFormat;\n            } else if (typeof opts.numberFormat === 'string') {\n                this.numFmt = _getNumFmt(wb, opts.numberFormat);\n            }\n        }\n\n        if (opts.pivotButton !== undefined) {\n            this.pivotButton = null; // attribute boolean\n        }\n\n        if (opts.quotePrefix !== undefined) {\n            this.quotePrefix = null; // attribute boolean\n        }\n\n        this.ids = {};\n    }\n\n    _createClass(Style, [{\n        key: 'toObject',\n\n\n        /** \n         * @func Style.toObject\n         * @desc Converts the Style instance to a javascript object\n         * @returns {Object}\n         */\n        value: function toObject() {\n            var obj = {};\n\n            if (typeof this.fontId === 'number') {\n                obj.font = this.font.toObject();\n            }\n\n            if (typeof this.fillId === 'number') {\n                obj.fill = this.fill.toObject();\n            }\n\n            if (typeof this.borderId === 'number') {\n                obj.border = this.border.toObject();\n            }\n\n            if (typeof this.numFmtId === 'number' && this.numFmtId < 164) {\n                obj.numberFormat = this.numFmtId;\n            } else if (this.numFmt !== undefined && this.numFmt !== null) {\n                obj.numberFormat = this.numFmt.formatCode;\n            }\n\n            if (this.alignment instanceof Alignment) {\n                obj.alignment = this.alignment.toObject();\n            }\n\n            if (this.pivotButton !== undefined) {\n                obj.pivotButton = this.pivotButton;\n            }\n\n            if (this.quotePrefix !== undefined) {\n                obj.quotePrefix = this.quotePrefix;\n            }\n\n            return obj;\n        }\n\n        /**\n         * @alias Style.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func Style.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addXFtoXMLele',\n        value: function addXFtoXMLele(ele) {\n            var thisEle = ele.ele('xf');\n            var thisXF = this.xf;\n            Object.keys(thisXF).forEach(function (a) {\n                if (a === 'alignment') {\n                    thisXF[a].addToXMLele(thisEle);\n                } else {\n                    thisEle.att(a, thisXF[a]);\n                }\n            });\n        }\n\n        /**\n         * @alias Style.addDXFtoXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file as a dxf for use with conditional formatting rules\n         * @func Style.addDXFtoXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addDXFtoXMLele',\n        value: function addDXFtoXMLele(ele) {\n            var thisEle = ele.ele('dxf');\n\n            if (this.font instanceof Font) {\n                this.font.addToXMLele(thisEle);\n            }\n\n            if (this.numFmt instanceof NumberFormat) {\n                this.numFmt.addToXMLele(thisEle);\n            }\n\n            if (this.fill instanceof Fill) {\n                this.fill.addToXMLele(thisEle);\n            }\n\n            if (this.alignment instanceof Alignment) {\n                this.alignment.addToXMLele(thisEle);\n            }\n\n            if (this.border instanceof Border) {\n                this.border.addToXMLele(thisEle);\n            }\n        }\n    }, {\n        key: 'xf',\n        get: function get() {\n            var thisXF = {};\n\n            if (typeof this.fontId === 'number') {\n                thisXF.applyFont = 1;\n                thisXF.fontId = this.fontId;\n            }\n\n            if (typeof this.fillId === 'number') {\n                thisXF.applyFill = 1;\n                thisXF.fillId = this.fillId;\n            }\n\n            if (typeof this.borderId === 'number') {\n                thisXF.applyBorder = 1;\n                thisXF.borderId = this.borderId;\n            }\n\n            if (typeof this.numFmtId === 'number') {\n                thisXF.applyNumberFormat = 1;\n                thisXF.numFmtId = this.numFmtId;\n            } else if (this.numFmt !== undefined && this.numFmt !== null) {\n                thisXF.applyNumberFormat = 1;\n                thisXF.numFmtId = this.numFmt.numFmtId;\n            }\n\n            if (this.alignment instanceof Alignment) {\n                thisXF.applyAlignment = 1;\n                thisXF.alignment = this.alignment;\n            }\n\n            return thisXF;\n        }\n    }]);\n\n    return Style;\n}();\n\nmodule.exports = Style;\n//# sourceMappingURL=style.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/classes/alignment.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../../utils.js');\nvar types = require('../../types/index.js');\nvar _ = require('lodash');\nvar xmlbuilder = require('xmlbuilder');\n\nvar Alignment = function () {\n    // §18.8.1 alignment (Alignment)\n    /**\n     * @class Alignment\n     * @param {Object} opts Properties of Alignment object\n     * @param {String} opts.horizontal Horizontal Alignment property of text. \n     * @param {String} opts.vertical Vertical Alignment property of text. \n     * @param {String} opts.readingOrder Reading order for language of text.\n     * @param {Number} opts.indent How much text should be indented. Setting indent to 1 will indent text 3 spaces\n     * @param {Boolean} opts.justifyLastLine Specifies whether to justify last line of text\n     * @param {Number} opts.relativeIndent Used in conditional formatting to state how much more text should be indented if rule passes\n     * @param {Boolean} opts.shrinkToFit Indicates if text should be shrunk to fit into cell\n     * @param {Number} opts.textRotation Number of degrees to rotate text counterclockwise\n     * @param {Boolean} opts.wrapText States whether text with newline characters should wrap\n     * @returns {Alignment}\n     */\n    function Alignment(opts) {\n        _classCallCheck(this, Alignment);\n\n        if (opts.horizontal !== undefined) {\n            this.horizontal = types.alignment.horizontal.validate(opts.horizontal) === true ? opts.horizontal : null;\n        }\n\n        if (opts.vertical !== undefined) {\n            this.vertical = types.alignment.vertical.validate(opts.vertical) === true ? opts.vertical : null;\n        }\n\n        if (opts.readingOrder !== undefined) {\n            this.readingOrder = types.alignment.readingOrder.validate(opts.readingOrder) === true ? opts.readingOrder : null;\n        }\n\n        if (opts.indent !== undefined) {\n            if (typeof opts.indent === 'number' && parseInt(opts.indent) === opts.indent && opts.indent > 0) {\n                this.indent = opts.indent;\n            } else {\n                throw new TypeError('alignment indent must be a positive integer.');\n            }\n        }\n\n        if (opts.justifyLastLine !== undefined) {\n            if (typeof opts.justifyLastLine === 'boolean') {\n                this.justifyLastLine = opts.justifyLastLine;\n            } else {\n                throw new TypeError('justifyLastLine alignment option must be of type boolean');\n            }\n        }\n\n        if (opts.relativeIndent !== undefined) {\n            if (typeof opts.relativeIndent === 'number' && parseInt(opts.relativeIndent) === opts.relativeIndent && opts.relativeIndent > 0) {\n                this.relativeIndent = opts.relativeIndent;\n            } else {\n                throw new TypeError('alignment indent must be a positive integer.');\n            }\n        }\n\n        if (opts.shrinkToFit !== undefined) {\n            if (typeof opts.shrinkToFit === 'boolean') {\n                this.shrinkToFit = opts.shrinkToFit;\n            } else {\n                throw new TypeError('justifyLastLine alignment option must be of type boolean');\n            }\n        }\n\n        if (opts.textRotation !== undefined) {\n            if (typeof opts.textRotation === 'number' && parseInt(opts.textRotation) === opts.textRotation) {\n                this.textRotation = opts.textRotation;\n            } else if (opts.textRotation !== undefined) {\n                throw new TypeError('alignment indent must be an integer.');\n            }\n        }\n\n        if (opts.wrapText !== undefined) {\n            if (typeof opts.wrapText === 'boolean') {\n                this.wrapText = opts.wrapText;\n            } else {\n                throw new TypeError('justifyLastLine alignment option must be of type boolean');\n            }\n        }\n    }\n\n    /** \n     * @func Alignment.toObject\n     * @desc Converts the Alignment instance to a javascript object\n     * @returns {Object}\n     */\n\n\n    _createClass(Alignment, [{\n        key: 'toObject',\n        value: function toObject() {\n            var obj = {};\n\n            this.horizontal !== undefined ? obj.horizontal = this.horizontal : null;\n            this.indent !== undefined ? obj.indent = this.indent : null;\n            this.justifyLastLine !== undefined ? obj.justifyLastLine = this.justifyLastLine : null;\n            this.readingOrder !== undefined ? obj.readingOrder = this.readingOrder : null;\n            this.relativeIndent !== undefined ? obj.relativeIndent = this.relativeIndent : null;\n            this.shrinkToFit !== undefined ? obj.shrinkToFit = this.shrinkToFit : null;\n            this.textRotation !== undefined ? obj.textRotation = this.textRotation : null;\n            this.vertical !== undefined ? obj.vertical = this.vertical : null;\n            this.wrapText !== undefined ? obj.wrapText = this.wrapText : null;\n\n            return obj;\n        }\n\n        /**\n         * @alias Alignment.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func Alignment.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var thisEle = ele.ele('alignment');\n            this.horizontal !== undefined ? thisEle.att('horizontal', this.horizontal) : null;\n            this.indent !== undefined ? thisEle.att('indent', this.indent) : null;\n            this.justifyLastLine === true ? thisEle.att('justifyLastLine', 1) : null;\n            this.readingOrder !== undefined ? thisEle.att('readingOrder', this.readingOrder) : null;\n            this.relativeIndent !== undefined ? thisEle.att('relativeIndent', this.relativeIndent) : null;\n            this.shrinkToFit === true ? thisEle.att('shrinkToFit', 1) : null;\n            this.textRotation !== undefined ? thisEle.att('textRotation', this.textRotation) : null;\n            this.vertical !== undefined ? thisEle.att('vertical', this.vertical) : null;\n            this.wrapText === true ? thisEle.att('wrapText', 1) : null;\n        }\n    }]);\n\n    return Alignment;\n}();\n\nmodule.exports = Alignment;\n//# sourceMappingURL=alignment.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/classes/border.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../../utils.js');\nvar types = require('../../types/index.js');\nvar _ = require('lodash');\nvar xmlbuilder = require('xmlbuilder');\nvar CTColor = require('./ctColor.js');\n\nvar BorderOrdinal = function () {\n    function BorderOrdinal(opts) {\n        _classCallCheck(this, BorderOrdinal);\n\n        opts = opts ? opts : {};\n        if (opts.color !== undefined) {\n            this.color = new CTColor(opts.color);\n        }\n        if (opts.style !== undefined) {\n            this.style = types.borderStyle.validate(opts.style) === true ? opts.style : null;\n        }\n    }\n\n    _createClass(BorderOrdinal, [{\n        key: 'toObject',\n        value: function toObject() {\n            var obj = {};\n            if (this.color !== undefined) {\n                obj.color = this.color.toObject();\n            }\n            if (this.style !== undefined) {\n                obj.style = this.style;\n            }\n            return obj;\n        }\n    }]);\n\n    return BorderOrdinal;\n}();\n\nvar Border = function () {\n    /** \n     * @class Border\n     * @desc Border object for Style\n     * @param {Object} opts Options for Border object\n     * @param {Object} opts.left Options for left side of Border\n     * @param {String} opts.left.color HEX represenation of color\n     * @param {String} opts.left.style Border style\n     * @param {Object} opts.right Options for right side of Border\n     * @param {String} opts.right.color HEX represenation of color\n     * @param {String} opts.right.style Border style\n     * @param {Object} opts.top Options for top side of Border\n     * @param {String} opts.top.color HEX represenation of color\n     * @param {String} opts.top.style Border style\n     * @param {Object} opts.bottom Options for bottom side of Border\n     * @param {String} opts.bottom.color HEX represenation of color\n     * @param {String} opts.bottom.style Border style\n     * @param {Object} opts.diagonal Options for diagonal side of Border\n     * @param {String} opts.diagonal.color HEX represenation of color\n     * @param {String} opts.diagonal.style Border style\n     * @param {Boolean} opts.outline States whether borders should be applied only to the outside borders of a cell range\n     * @param {Boolean} opts.diagonalDown States whether diagonal border should go from top left to bottom right\n     * @param {Boolean} opts.diagonalUp States whether diagonal border should go from bottom left to top right\n     * @returns {Border}\n     */\n    function Border(opts) {\n        var _this = this;\n\n        _classCallCheck(this, Border);\n\n        opts = opts ? opts : {};\n        this.left;\n        this.right;\n        this.top;\n        this.bottom;\n        this.diagonal;\n        this.outline;\n        this.diagonalDown;\n        this.diagonalUp;\n\n        Object.keys(opts).forEach(function (opt) {\n            if (['outline', 'diagonalDown', 'diagonalUp'].indexOf(opt) >= 0) {\n                if (typeof opts[opt] === 'boolean') {\n                    _this[opt] = opts[opt];\n                } else {\n                    throw new TypeError('Border outline option must be of type Boolean');\n                }\n            } else if (['left', 'right', 'top', 'bottom', 'diagonal'].indexOf(opt) < 0) {\n                //TODO: move logic to types folder\n                throw new TypeError('Invalid key for border declaration ' + opt + '. Must be one of left, right, top, bottom, diagonal');\n            } else {\n                _this[opt] = new BorderOrdinal(opts[opt]);\n            }\n        });\n    }\n\n    /** \n     * @func Border.toObject\n     * @desc Converts the Border instance to a javascript object\n     * @returns {Object}\n     */\n\n\n    _createClass(Border, [{\n        key: 'toObject',\n        value: function toObject() {\n            var obj = {};\n            obj.left;\n            obj.right;\n            obj.top;\n            obj.bottom;\n            obj.diagonal;\n\n            if (this.left !== undefined) {\n                obj.left = this.left.toObject();\n            }\n            if (this.right !== undefined) {\n                obj.right = this.right.toObject();\n            }\n            if (this.top !== undefined) {\n                obj.top = this.top.toObject();\n            }\n            if (this.bottom !== undefined) {\n                obj.bottom = this.bottom.toObject();\n            }\n            if (this.diagonal !== undefined) {\n                obj.diagonal = this.diagonal.toObject();\n            }\n            typeof this.outline === 'boolean' ? obj.outline = this.outline : null;\n            typeof this.diagonalDown === 'boolean' ? obj.diagonalDown = this.diagonalDown : null;\n            typeof this.diagonalUp === 'boolean' ? obj.diagonalUp = this.diagonalUp : null;\n\n            return obj;\n        }\n\n        /**\n         * @alias Border.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func Border.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(borderXML) {\n            var _this2 = this;\n\n            var bXML = borderXML.ele('border');\n            if (this.outline === true) {\n                bXML.att('outline', '1');\n            }\n            if (this.diagonalUp === true) {\n                bXML.att('diagonalUp', '1');\n            }\n            if (this.diagonalDown === true) {\n                bXML.att('diagonalDown', '1');\n            }\n\n            ['left', 'right', 'top', 'bottom', 'diagonal'].forEach(function (ord) {\n                var thisOEle = bXML.ele(ord);\n                if (_this2[ord] !== undefined) {\n                    if (_this2[ord].style !== undefined) {\n                        thisOEle.att('style', _this2[ord].style);\n                    }\n                    if (_this2[ord].color instanceof CTColor) {\n                        _this2[ord].color.addToXMLele(thisOEle);\n                    }\n                }\n            });\n        }\n    }]);\n\n    return Border;\n}();\n\nmodule.exports = Border;\n//# sourceMappingURL=border.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/classes/ctColor.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../../utils.js');\nvar types = require('../../types/index.js');\nvar _ = require('lodash');\nvar xmlbuilder = require('xmlbuilder');\n\nvar CTColor = function () {\n    //§18.8.3 && §18.8.19\n    /** \n     * @class CTColor\n     * @desc Excel color representation\n     * @param {String} color Excel Color scheme or Excel Color name or HEX value of Color\n     * @properties {String} type Type of color object. defaults to rgb\n     * @properties {String} rgb ARGB representation of Color\n     * @properties {String} theme Excel Color Scheme\n     * @returns {CTColor}\n     */\n    function CTColor(color) {\n        _classCallCheck(this, CTColor);\n\n        this.type;\n        this.rgb;\n        this.theme; //§20.1.6.2 clrScheme (Color Scheme) : types.colorSchemes\n\n        if (typeof color === 'string') {\n            if (types.colorScheme[color.toLowerCase()] !== undefined) {\n                this.theme = color;\n                this.type = 'theme';\n            } else {\n                try {\n                    this.rgb = types.excelColor.getColor(color);\n                    this.type = 'rgb';\n                } catch (e) {\n                    throw new TypeError('Fill color must be an RGB value, Excel color (' + types.excelColor.opts.join(', ') + ') or Excel theme (' + types.colorScheme.opts.join(', ') + ')');\n                }\n            }\n        }\n    }\n\n    /** \n     * @func CTColor.toObject\n     * @desc Converts the CTColor instance to a javascript object\n     * @returns {Object}\n     */\n\n\n    _createClass(CTColor, [{\n        key: 'toObject',\n        value: function toObject() {\n            return this[this.type];\n        }\n\n        /**\n         * @alias CTColor.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func CTColor.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var colorEle = ele.ele('color');\n            colorEle.att(this.type, this[this.type]);\n        }\n    }]);\n\n    return CTColor;\n}();\n\nmodule.exports = CTColor;\n//# sourceMappingURL=ctColor.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/classes/fill.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../../utils.js');\nvar types = require('../../types/index.js');\nvar _ = require('lodash');\nvar xmlbuilder = require('xmlbuilder');\nvar CTColor = require('./ctColor.js');\n\nvar Stop = function () {\n    //§18.8.38\n    /** \n     * @class Stop\n     * @desc Stops for Gradient fills\n     * @param {Object} opts Options for Stop\n     * @param {String} opts.color Color of Stop\n     * @param {Number} opts.position Order of Stop with first stop being 0\n     * @returns {Stop}\n     */\n    function Stop(opts, position) {\n        _classCallCheck(this, Stop);\n\n        this.color = new CTColor(opts.color);\n        this.position = position;\n    }\n\n    /** \n     * @func Stop.toObject\n     * @desc Converts the Stop instance to a javascript object\n     * @returns {Object}\n     */\n\n\n    _createClass(Stop, [{\n        key: 'toObject',\n        value: function toObject() {\n            var obj = {};\n            this.color !== undefined ? obj.color = this.color.toObject() : null;\n            this.position !== undefined ? obj.position = this.position : null;\n            return obj;\n        }\n    }]);\n\n    return Stop;\n}();\n\nvar Fill = function () {\n    //§18.8.20 fill (Fill)\n\n    /** \n     * @class Fill\n     * @desc Excel Fill \n     * @param {Object} opts\n     * @param {String} opts.type Type of Excel fill (gradient or pattern)\n     * @param {Number} opts.bottom If Gradient fill, the position of the bottom edge of the inner rectange as a percentage in decimal form. (must be between 0 and 1)\n     * @param {Number} opts.top If Gradient fill, the position of the top edge of the inner rectange as a percentage in decimal form. (must be between 0 and 1)\n     * @param {Number} opts.left If Gradient fill, the position of the left edge of the inner rectange as a percentage in decimal form. (must be between 0 and 1)\n     * @param {Number} opts.right If Gradient fill, the position of the right edge of the inner rectange as a percentage in decimal form. (must be between 0 and 1)\n     * @param {Number} opts.degree Angle of the Gradient\n     * @param {Array.Stop} opts.stops Array of position stops for gradient\n     * @returns {Fill}\n     */\n    function Fill(opts) {\n        var _this = this;\n\n        _classCallCheck(this, Fill);\n\n        if (['gradient', 'pattern', 'none'].indexOf(opts.type) >= 0) {\n            this.type = opts.type;\n        } else {\n            throw new TypeError('Fill type must be one of gradient, pattern or none.');\n        }\n\n        switch (this.type) {\n            case 'gradient':\n                //§18.8.24\n                if (opts.bottom !== undefined) {\n                    if (opts.bottom < 0 || opts.bottom > 1) {\n                        throw new TypeError('Values for gradient fill bottom attribute must be a decimal between 0 and 1');\n                    } else {\n                        this.bottom = opts.bottom;\n                    }\n                }\n\n                if (opts.degree !== undefined) {\n                    if (typeof opts.degree === 'number') {\n                        this.degree = opts.degree;\n                    } else {\n                        throw new TypeError('Values of gradient fill degree must be of type number.');\n                    }\n                }\n\n                if (opts.left !== undefined) {\n                    if (opts.left < 0 || opts.left > 1) {\n                        throw new TypeError('Values for gradient fill left attribute must be a decimal between 0 and 1');\n                    } else {\n                        this.left = opts.left;\n                    }\n                }\n\n                if (opts.right !== undefined) {\n                    if (opts.right < 0 || opts.right > 1) {\n                        throw new TypeError('Values for gradient fill right attribute must be a decimal between 0 and 1');\n                    } else {\n                        this.right = opts.right;\n                    }\n                }\n\n                if (opts.top !== undefined) {\n                    if (opts.top < 0 || opts.top > 1) {\n                        throw new TypeError('Values for gradient fill top attribute must be a decimal between 0 and 1');\n                    } else {\n                        this.top = opts.top;\n                    }\n                }\n\n                if (opts.stops !== undefined) {\n                    if (opts.stops instanceof Array) {\n                        opts.stops.forEach(function (s, i) {\n                            _this.stops.push(new Stop(s, i));\n                        });\n                    } else {\n                        throw new TypeError('Stops for gradient fills must be sent as an Array');\n                    }\n                }\n\n                break;\n\n            case 'pattern':\n                //§18.8.32\n                if (opts.bgColor !== undefined) {\n                    this.bgColor = new CTColor(opts.bgColor);\n                }\n\n                if (opts.fgColor !== undefined) {\n                    this.fgColor = new CTColor(opts.fgColor);\n                }\n\n                if (opts.patternType !== undefined) {\n                    types.fillPattern.validate(opts.patternType) === true ? this.patternType = opts.patternType : null;\n                }\n                break;\n\n            case 'none':\n                this.patternType = 'none';\n                break;\n        }\n    }\n\n    /** \n     * @func Fill.toObject\n     * @desc Converts the Fill instance to a javascript object\n     * @returns {Object}\n     */\n\n\n    _createClass(Fill, [{\n        key: 'toObject',\n        value: function toObject() {\n            var obj = {};\n\n            this.type !== undefined ? obj.type = this.type : null;\n            this.bottom !== undefined ? obj.bottom = this.bottom : null;\n            this.degree !== undefined ? obj.degree = this.degree : null;\n            this.left !== undefined ? obj.left = this.left : null;\n            this.right !== undefined ? obj.right = this.right : null;\n            this.top !== undefined ? obj.top = this.top : null;\n            this.bgColor !== undefined ? obj.bgColor = this.bgColor.toObject() : null;\n            this.fgColor !== undefined ? obj.fgColor = this.fgColor.toObject() : null;\n            this.patternType !== undefined ? obj.patternType = this.patternType : null;\n\n            if (this.stops !== undefined) {\n                obj.stop = [];\n                this.stops.forEach(function (s) {\n                    obj.stops.push(s.toObject());\n                });\n            }\n\n            return obj;\n        }\n\n        /**\n         * @alias Fill.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func Fill.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(fXML) {\n            var pFill = fXML.ele('patternFill').att('patternType', this.patternType);\n\n            if (this.fgColor instanceof CTColor) {\n                pFill.ele('fgColor').att(this.fgColor.type, this.fgColor[this.fgColor.type]);\n            }\n\n            if (this.bgColor instanceof CTColor) {\n                pFill.ele('bgColor').att(this.bgColor.type, this.bgColor[this.bgColor.type]);\n            }\n        }\n    }]);\n\n    return Fill;\n}();\n\nmodule.exports = Fill;\n//# sourceMappingURL=fill.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/classes/font.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = require('../../utils.js');\nvar _ = require('lodash');\nvar xmlbuilder = require('xmlbuilder');\nvar types = require('../../types/index.js');\n\nvar Font = function () {\n    /**\n     * @class Font\n     * @desc Instance of Font with properties\n     * @param {Object} opts Options for Font\n     * @param {String} opts.color HEX color of font\n     * @param {String} opts.name Name of Font. i.e. Calibri\n     * @param {String} opts.scheme Font Scheme. defaults to major\n     * @param {Number} opts.size Pt size of Font\n     * @param {String} opts.family Font Family. defaults to roman\n     * @param {String} opts.vertAlign Specifies font as subscript or superscript\n     * @param {Number} opts.charset Character set of font as defined in §18.4.1 charset (Character Set) or standard\n     * @param {Boolean} opts.condense Macintosh compatibility settings to squeeze text together when rendering\n     * @param {Boolean} opts.extend Stretches out the text when rendering\n     * @param {Boolean} opts.bold States whether font should be bold\n     * @param {Boolean} opts.italics States whether font should be in italics\n     * @param {Boolean} opts.outline States whether font should be outlined\n     * @param {Boolean} opts.shadow States whether font should have a shadow\n     * @param {Boolean} opts.strike States whether font should have a strikethrough\n     * @param {Boolean} opts.underline States whether font should be underlined\n     * @retuns {Font}\n     */\n    function Font(opts) {\n        _classCallCheck(this, Font);\n\n        opts = opts ? opts : {};\n\n        typeof opts.color === 'string' ? this.color = types.excelColor.getColor(opts.color) : null;\n        typeof opts.name === 'string' ? this.name = opts.name : null;\n        typeof opts.scheme === 'string' ? this.scheme = opts.scheme : null;\n        typeof opts.size === 'number' ? this.size = opts.size : null;\n        typeof opts.family === 'string' && types.fontFamily.validate(opts.family) === true ? this.family = opts.family : null;\n\n        typeof opts.vertAlign === 'string' ? this.vertAlign = opts.vertAlign : null;\n        typeof opts.charset === 'number' ? this.charset = opts.charset : null;\n\n        typeof opts.condense === 'boolean' ? this.condense = opts.condense : null;\n        typeof opts.extend === 'boolean' ? this.extend = opts.extend : null;\n        typeof opts.bold === 'boolean' ? this.bold = opts.bold : null;\n        typeof opts.italics === 'boolean' ? this.italics = opts.italics : null;\n        typeof opts.outline === 'boolean' ? this.outline = opts.outline : null;\n        typeof opts.shadow === 'boolean' ? this.shadow = opts.shadow : null;\n        typeof opts.strike === 'boolean' ? this.strike = opts.strike : null;\n        typeof opts.underline === 'boolean' ? this.underline = opts.underline : null;\n    }\n\n    /** \n     * @func Font.toObject\n     * @desc Converts the Font instance to a javascript object\n     * @returns {Object}\n     */\n\n\n    _createClass(Font, [{\n        key: 'toObject',\n        value: function toObject() {\n            var obj = {};\n\n            typeof this.charset === 'number' ? obj.charset = this.charset : null;\n            typeof this.color === 'string' ? obj.color = this.color : null;\n            typeof this.family === 'string' ? obj.family = this.family : null;\n            typeof this.name === 'string' ? obj.name = this.name : null;\n            typeof this.scheme === 'string' ? obj.scheme = this.scheme : null;\n            typeof this.size === 'number' ? obj.size = this.size : null;\n            typeof this.vertAlign === 'string' ? obj.vertAlign = this.vertAlign : null;\n\n            typeof this.condense === 'boolean' ? obj.condense = this.condense : null;\n            typeof this.extend === 'boolean' ? obj.extend = this.extend : null;\n            typeof this.bold === 'boolean' ? obj.bold = this.bold : null;\n            typeof this.italics === 'boolean' ? obj.italics = this.italics : null;\n            typeof this.outline === 'boolean' ? obj.outline = this.outline : null;\n            typeof this.shadow === 'boolean' ? obj.shadow = this.shadow : null;\n            typeof this.strike === 'boolean' ? obj.strike = this.strike : null;\n            typeof this.underline === 'boolean' ? obj.underline = this.underline : null;\n\n            return obj;\n        }\n\n        /**\n         * @alias Font.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func Font.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(fontXML) {\n            var fEle = fontXML.ele('font');\n            fEle.ele('sz').att('val', this.size !== undefined ? this.size : 12);\n            fEle.ele('color').att('rgb', this.color !== undefined ? this.color : 'FF000000');\n            fEle.ele('name').att('val', this.name !== undefined ? this.name : 'Calibri');\n            if (this.family !== undefined) {\n                fEle.ele('family').att('val', types.fontFamily[this.family.toLowerCase()]);\n            }\n            if (this.scheme !== undefined) {\n                fEle.ele('scheme').att('val', this.scheme);\n            }\n\n            this.condense === true ? fEle.ele('condense') : null;\n            this.extend === true ? fEle.ele('extend') : null;\n            this.bold === true ? fEle.ele('b') : null;\n            this.italics === true ? fEle.ele('i') : null;\n            this.outline === true ? fEle.ele('outline') : null;\n            this.shadow === true ? fEle.ele('shadow') : null;\n            this.strike === true ? fEle.ele('strike') : null;\n            this.underline === true ? fEle.ele('u') : null;\n            this.vertAlign === true ? fEle.ele('vertAlign') : null;\n\n            return true;\n        }\n    }]);\n\n    return Font;\n}();\n\nmodule.exports = Font;\n//# sourceMappingURL=font.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/classes/numberFormat.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NumberFormat = function () {\n    /**\n    * @class NumberFormat\n    * @param {String} fmt Format of the Number\n    * @returns {NumberFormat}\n    */\n    function NumberFormat(fmt) {\n        _classCallCheck(this, NumberFormat);\n\n        this.formatCode = fmt;\n        this.id;\n    }\n\n    _createClass(NumberFormat, [{\n        key: 'addToXMLele',\n\n\n        /**\n         * @alias NumberFormat.addToXMLele\n         * @desc When generating Workbook output, attaches style to the styles xml file\n         * @func NumberFormat.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n        value: function addToXMLele(ele) {\n            if (this.formatCode !== undefined) {\n                ele.ele('numFmt').att('formatCode', this.formatCode).att('numFmtId', this.numFmtId);\n            }\n        }\n    }, {\n        key: 'numFmtId',\n        get: function get() {\n            return this.id;\n        },\n        set: function set(id) {\n            this.id = id;\n        }\n    }]);\n\n    return NumberFormat;\n}();\n\nmodule.exports = NumberFormat;\n//# sourceMappingURL=numberFormat.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/row/index.js":"'use strict';\n\nvar _ = require('lodash');\nvar Cell = require('../cell/cell.js');\nvar Row = require('../row/row.js');\nvar Column = require('../column/column.js');\nvar WorkSheet = require('../worksheet/worksheet.js');\nvar utils = require('../utils.js');\n\n/**\n * Module repesenting a Row Accessor\n * @alias Worksheet.row\n * @namespace\n * @func Worksheet.row\n * @desc Access a row in order to manipulate values\n * @param {Number} row Row of top left cell\n * @returns {Row}\n */\nvar rowAccessor = function rowAccessor(ws, row) {\n\n    if (typeof row !== 'number') {\n        throw new TypeError('Row sent to row accessor was not a number.');\n    }\n\n    if (!(ws.rows[row] instanceof Row)) {\n        ws.rows[row] = new Row(row, ws);\n    }\n\n    return ws.rows[row];\n};\n\nmodule.exports = rowAccessor;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/column/index.js":"'use strict';\n\nvar _ = require('lodash');\nvar Cell = require('../cell/cell.js');\nvar Row = require('../row/row.js');\nvar Column = require('../column/column.js');\nvar utils = require('../utils.js');\n\n/**\n * Module repesenting a Column Accessor\n * @alias Worksheet.column\n * @namespace\n * @func Worksheet.column\n * @desc Access a column in order to manipulate values\n * @param {Number} col Column of top left cell\n * @returns {Column}\n */\nvar colAccessor = function colAccessor(ws, col) {\n    if (!(ws.cols[col] instanceof Column)) {\n        ws.cols[col] = new Column(col, ws);\n    }\n    return ws.cols[col];\n};\n\nmodule.exports = colAccessor;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/sheet_default_params.js":"'use strict';\n\nmodule.exports = {\n    'margins': {\n        'bottom': 0.75,\n        'footer': 0.3,\n        'header': 0.3,\n        'left': 0.7,\n        'right': 0.7,\n        'top': 0.75\n    },\n    'printOptions': {\n        'centerHorizontal': null,\n        'centerVertical': null,\n        'printGridLines': null,\n        'printHeadings': null\n\n    },\n    'headerFooter': {\n        'evenFooter': null,\n        'evenHeader': null,\n        'firstFooter': null,\n        'firstHeader': null,\n        'oddFooter': null,\n        'oddHeader': null,\n        'alignWithMargins': null,\n        'differentFirst': null,\n        'differentOddEven': null,\n        'scaleWithDoc': null\n    },\n    'pageSetup': {\n        'blackAndWhite': null,\n        'cellComments': null,\n        'copies': null,\n        'draft': null,\n        'errors': null,\n        'firstPageNumber': null,\n        'fitToHeight': null,\n        'fitToWidth': null,\n        'horizontalDpi': null,\n        'orientation': null,\n        'pageOrder': null,\n        'paperHeight': null,\n        'paperSize': null,\n        'paperWidth': null,\n        'scale': null,\n        'useFirstPageNumber': null,\n        'usePrinterDefaults': null,\n        'verticalDpi': null\n    },\n    'sheetView': {\n        'pane': {\n            'activePane': null,\n            'state': null,\n            'topLeftCell': null,\n            'xSplit': null,\n            'ySplit': null\n        },\n        'tabSelected': 0,\n        'workbookViewId': 0,\n        'rightToLeft': 0,\n        'zoomScale': 100,\n        'zoomScaleNormal': 100,\n        'zoomScalePageLayoutView': 100\n    },\n    'sheetFormat': {\n        'baseColWidth': 10,\n        'customHeight': null,\n        'defaultColWidth': null,\n        'defaultRowHeight': null,\n        'outlineLevelCol': null,\n        'outlineLevelRow': null,\n        'thickBottom': null,\n        'thickTop': null,\n        'zeroHeight': null\n    },\n    'sheetProtection': { // same as \"Protect Sheet\" in Review tab of Excel \n        'autoFilter': null,\n        'deleteColumns': null,\n        'deleteRows': null,\n        'formatCells': null,\n        'formatColumns': null,\n        'formatRows': null,\n        'hashValue': null,\n        'insertColumns': null,\n        'insertHyperlinks': null,\n        'insertRows': null,\n        'objects': null,\n        'password': null,\n        'pivotTables': null,\n        'scenarios': null,\n        'selectLockedCells': null,\n        'selectUnlockedCells': null,\n        'sheet': null,\n        'sort': null\n    },\n    'outline': {\n        'summaryBelow': null,\n        'summaryRight': null\n    },\n    'autoFilter': {\n        'startRow': null,\n        'endRow': null,\n        'startCol': null,\n        'endCol': null,\n        'ref': null,\n        'filters': []\n    }\n};\n//# sourceMappingURL=sheet_default_params.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/classes/hyperlink.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Hyperlink = function () {\n    //§18.3.1.47 hyperlink (Hyperlink)\n    function Hyperlink(opts) {\n        _classCallCheck(this, Hyperlink);\n\n        opts = opts ? opts : {};\n\n        if (opts.ref === undefined) {\n            throw new TypeError('ref is a required option when creating a hyperlink');\n        }\n        this.ref = opts.ref;\n\n        if (opts.display !== undefined) {\n            this.display = opts.display;\n        } else {\n            this.display = opts.location;\n        }\n        if (opts.location !== undefined) {\n            this.location = opts.location;\n        }\n        if (opts.tooltip !== undefined) {\n            this.tooltip = opts.tooltip;\n        } else {\n            this.tooltip = opts.location;\n        }\n        this.id;\n    }\n\n    _createClass(Hyperlink, [{\n        key: 'addToXMLEle',\n        value: function addToXMLEle(ele) {\n            var thisEle = ele.ele('hyperlink');\n            thisEle.att('ref', this.ref);\n            thisEle.att('r:id', this.rId);\n            if (this.display !== undefined) {\n                thisEle.att('display', this.display);\n            }\n            if (this.location !== undefined) {\n                thisEle.att('location', this.location);\n            }\n            if (this.tooltip !== undefined) {\n                thisEle.att('tooltip', this.tooltip);\n            }\n            thisEle.up();\n        }\n    }, {\n        key: 'rId',\n        get: function get() {\n            return 'rId' + this.id;\n        }\n    }]);\n\n    return Hyperlink;\n}();\n\nvar HyperlinkCollection = function () {\n    //§18.3.1.48 hyperlinks (Hyperlinks)\n    function HyperlinkCollection() {\n        _classCallCheck(this, HyperlinkCollection);\n\n        this.links = [];\n    }\n\n    _createClass(HyperlinkCollection, [{\n        key: 'add',\n        value: function add(opts) {\n            var thisLink = new Hyperlink(opts);\n            thisLink.id = this.links.length + 1;\n            this.links.push(thisLink);\n            return thisLink;\n        }\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var _this = this;\n\n            if (this.length > 0) {\n                (function () {\n                    var linksEle = ele.ele('hyperlinks');\n                    _this.links.forEach(function (l) {\n                        l.addToXMLEle(linksEle);\n                    });\n                    linksEle.up();\n                })();\n            }\n        }\n    }, {\n        key: 'length',\n        get: function get() {\n            return this.links.length;\n        }\n    }]);\n\n    return HyperlinkCollection;\n}();\n\nmodule.exports = { HyperlinkCollection: HyperlinkCollection, Hyperlink: Hyperlink };\n//# sourceMappingURL=hyperlink.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/classes/dataValidation.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar myUtils = require('../../utils.js');\n\nvar cleanFormula = function cleanFormula(f) {\n    if (typeof f === 'number' || f.substr(0, 1) === '=') {\n        return f;\n    } else {\n        return '\"' + f + '\"';\n    }\n};\n\nvar DataValidation = function () {\n    // §18.3.1.32 dataValidation (Data Validation)\n    function DataValidation(opts) {\n        _classCallCheck(this, DataValidation);\n\n        opts = opts ? opts : {};\n        if (opts.sqref === undefined) {\n            throw new TypeError('sqref must be specified when creating a DataValidation instance.');\n        }\n        this.sqref = opts.sqref;\n        if (opts.formulas instanceof Array) {\n            opts.formulas[0] !== undefined ? this.formula1 = opts.formulas[0] : null;\n            opts.formulas[1] !== undefined ? this.formula2 = opts.formulas[1] : null;\n        }\n\n        if (opts.allowBlank !== undefined) {\n            if (parseInt(opts.allowBlank) === 1) {\n                opts.allowBlank = true;\n            }\n            if (parseInt(opts.allowBlank) === 0) {\n                opts.allowBlank = false;\n            }\n            if (typeof opts.allowBlank !== 'boolean') {\n                throw new TypeError('DataValidation allowBlank must be true, false, 1 or 0');\n            }\n            this.allowBlank = opts.allowBlank;\n        }\n\n        if (opts.errorStyle !== undefined) {\n            var enums = ['stop', 'warning', 'information'];\n            if (enums.indexOf(opts.errorStyle) < 0) {\n                throw new TypeError('DataValidation errorStyle must be one of ' + enums.join(', '));\n            }\n            this.errorStyle = opts.errorStyle;\n        }\n\n        if (opts.error !== undefined) {\n            if (typeof opts.error !== 'string') {\n                throw new TypeError('DataValidation error must be a string');\n            }\n            this.error = opts.error;\n            this.showErrorMessage = opts.showErrorMessage = true;\n        }\n\n        if (opts.errorTitle !== undefined) {\n            if (typeof opts.errorTitle !== 'string') {\n                throw new TypeError('DataValidation errorTitle must be a string');\n            }\n            this.errorTitle = opts.errorTitle;\n            this.showErrorMessage = opts.showErrorMessage = true;\n        }\n\n        if (opts.imeMode !== undefined) {\n            var _enums = ['noControl', 'off', 'on', 'disabled', 'hiragana', 'fullKatakana', 'halfKatakana', 'fullAlpha', 'halfAlpha', 'fullHangul', 'halfHangul'];\n            if (_enums.indexOf(opts.imeMode) < 0) {\n                throw new TypeError('DataValidation imeMode must be one of ' + _enums.join(', '));\n            }\n            this.imeMode = opts.imeMode;\n        }\n\n        if (opts.operator !== undefined) {\n            var _enums2 = ['between', 'notBetween', 'equal', 'notEqual', 'lessThan', 'lessThanOrEqual', 'greaterThan', 'greaterThanOrEqual'];\n            if (_enums2.indexOf(opts.operator) < 0) {\n                throw new TypeError('DataValidation operator must be one of ' + _enums2.join(', '));\n            }\n            this.operator = opts.operator;\n        }\n\n        if (opts.prompt !== undefined) {\n            if (typeof opts.prompt !== 'string') {\n                throw new TypeError('DataValidation prompt must be a string');\n            }\n            this.prompt = opts.prompt;\n            this.showInputMessage = opts.showInputMessage = true;\n        }\n\n        if (opts.promptTitle !== undefined) {\n            if (typeof opts.promptTitle !== 'string') {\n                throw new TypeError('DataValidation promptTitle must be a string');\n            }\n            this.promptTitle = opts.promptTitle;\n            this.showInputMessage = opts.showInputMessage = true;\n        }\n\n        if (opts.showDropDown !== undefined) {\n            if (parseInt(opts.showDropDown) === 1) {\n                opts.showDropDown = true;\n            }\n            if (parseInt(opts.showDropDown) === 0) {\n                opts.showDropDown = false;\n            }\n            if (typeof opts.showDropDown !== 'boolean') {\n                throw new TypeError('DataValidation showDropDown must be true, false, 1 or 0');\n            }\n            this.showDropDown = opts.showDropDown;\n        }\n\n        if (opts.showErrorMessage !== undefined) {\n            if (parseInt(opts.showErrorMessage) === 1) {\n                opts.showErrorMessage = true;\n            }\n            if (parseInt(opts.showErrorMessage) === 0) {\n                opts.showErrorMessage = false;\n            }\n            if (typeof opts.showErrorMessage !== 'boolean') {\n                throw new TypeError('DataValidation showErrorMessage must be true, false, 1 or 0');\n            }\n            this.showErrorMessage = opts.showErrorMessage;\n        }\n\n        if (opts.showInputMessage !== undefined) {\n            if (parseInt(opts.showInputMessage) === 1) {\n                opts.showInputMessage = true;\n            }\n            if (parseInt(opts.showInputMessage) === 0) {\n                opts.showInputMessage = false;\n            }\n            if (typeof opts.showInputMessage !== 'boolean') {\n                throw new TypeError('DataValidation showInputMessage must be true, false, 1 or 0');\n            }\n            this.showInputMessage = opts.showInputMessage;\n        }\n\n        if (opts.type !== undefined) {\n            var _enums3 = ['none', 'whole', 'decimal', 'list', 'date', 'time', 'textLength', 'custom'];\n            if (_enums3.indexOf(opts.type) < 0) {\n                throw new TypeError('DataValidation type must be one of ' + _enums3.join(', '));\n            }\n            this.type = opts.type;\n        }\n    }\n\n    _createClass(DataValidation, [{\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var valEle = ele.ele('dataValidation');\n            this.type !== undefined ? valEle.att('type', this.type) : null;\n            this.errorStyle !== undefined ? valEle.att('errorStyle', this.errorStyle) : null;\n            this.imeMode !== undefined ? valEle.att('imeMode', this.imeMode) : null;\n            this.operator !== undefined ? valEle.att('operator', this.operator) : null;\n            this.allowBlank !== undefined ? valEle.att('allowBlank', myUtils.boolToInt(this.allowBlank)) : null;\n            this.showDropDown === false ? valEle.att('showDropDown', 1) : null; // For some reason, the Excel app sets this property to true if the \"In-cell dropdown\" option is selected in the data validation screen.\n            this.showInputMessage !== undefined ? valEle.att('showInputMessage', myUtils.boolToInt(this.showInputMessage)) : null;\n            this.showErrorMessage !== undefined ? valEle.att('showErrorMessage', myUtils.boolToInt(this.showErrorMessage)) : null;\n            this.errorTitle !== undefined ? valEle.att('errorTitle', this.errorTitle) : null;\n            this.error !== undefined ? valEle.att('error', this.error) : null;\n            this.promptTitle !== undefined ? valEle.att('promptTitle', this.promptTitle) : null;\n            this.prompt !== undefined ? valEle.att('prompt', this.prompt) : null;\n            this.sqref !== undefined ? valEle.att('sqref', this.sqref) : null;\n            this.formula1 !== undefined ? valEle.ele('formula1').text(cleanFormula(this.formula1)) : null;\n            this.formula2 !== undefined ? valEle.ele('formula2').text(cleanFormula(this.formula2)) : null;\n            valEle.up();\n        }\n    }]);\n\n    return DataValidation;\n}();\n\nvar DataValidationCollection = function () {\n    // §18.3.1.33 dataValidations (Data Validations)\n    function DataValidationCollection(opts) {\n        _classCallCheck(this, DataValidationCollection);\n\n        opts = opts ? opts : {};\n        this.items = [];\n    }\n\n    _createClass(DataValidationCollection, [{\n        key: 'add',\n        value: function add(opts) {\n            var thisValidation = new DataValidation(opts);\n            this.items.push(thisValidation);\n            return thisValidation;\n        }\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var valsEle = ele.ele('dataValidations').att('count', this.length);\n            this.items.forEach(function (val) {\n                val.addToXMLele(valsEle);\n            });\n            valsEle.up();\n        }\n    }, {\n        key: 'length',\n        get: function get() {\n            return this.items.length;\n        }\n    }]);\n\n    return DataValidationCollection;\n}();\n\nmodule.exports = { DataValidationCollection: DataValidationCollection, DataValidation: DataValidation };\n//# sourceMappingURL=dataValidation.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/drawing/index.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Drawing = require('./drawing.js');\nvar Picture = require('./picture.js');\n\nvar DrawingCollection = function () {\n    function DrawingCollection() {\n        _classCallCheck(this, DrawingCollection);\n\n        this.drawings = [];\n    }\n\n    _createClass(DrawingCollection, [{\n        key: 'add',\n        value: function add(opts) {\n            switch (opts.type) {\n                case 'picture':\n                    var newPic = new Picture(opts);\n                    this.drawings.push(newPic);\n                    return newPic;\n\n                default:\n                    throw new TypeError('this option is not yet supported');\n            }\n        }\n    }, {\n        key: 'length',\n        get: function get() {\n            return this.drawings.length;\n        }\n    }, {\n        key: 'isEmpty',\n        get: function get() {\n            if (this.drawings.length === 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }]);\n\n    return DrawingCollection;\n}();\n\nmodule.exports = { DrawingCollection: DrawingCollection, Drawing: Drawing, Picture: Picture };\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/drawing/drawing.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CTMarker = require('../classes/ctMarker.js');\nvar Point = require('../classes/point.js');\nvar EMU = require('../classes/emu.js');\n\nvar Drawing = function () {\n    /**\n     * Element representing an Excel Drawing superclass\n     * @property {String} anchorType Proprty for type of anchor. One of 'absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'\n     * @property {CTMarker} anchorFrom Property for the top left corner position of drawing\n     * @property {CTMarker} anchorTo Property for the bottom left corner position of drawing\n     * @property {String} editAs Property that states how to interact with the Drawing in Excel. One of 'absolute', 'oneCell', 'twoCell'\n     * @property {Point} _position Internal property for position on Excel Worksheet when drawing type is absoluteAnchor\n     * @returns {Drawing} Excel Drawing \n     */\n    function Drawing() {\n        _classCallCheck(this, Drawing);\n\n        this._anchorType = null;\n        this._anchorFrom = null;\n        this._anchorTo = null;\n        this._editAs = null;\n        this._position = null;\n    }\n\n    _createClass(Drawing, [{\n        key: 'anchor',\n\n\n        /**\n         * @alias Drawing.achor\n         * @desc Sets the postion and anchor properties of the Drawing\n         * @func Drawing.achor\n         * @param {String} type Anchor type of drawing\n         * @param {Object} from Properties for achorFrom property\n         * @param {Number} from.col Left edge of drawing will align with left edge of this column\n         * @param {String} from.colOff Offset. Drawing will be shifted to the right the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n         * @param {Number} from.row Top edge of drawing will align with top edge of this row\n         * @param {String} from.rowOff Offset. Drawing will be shifted down the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n         * @param {Object} to Properties for anchorTo property\n         * @param {Number} to.col Left edge of drawing will align with left edge of this column\n         * @param {String} to.colOff Offset. Drawing will be shifted to the right the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n         * @param {Number} to.row Top edge of drawing will align with top edge of this row\n         * @param {String} to.rowOff Offset. Drawing will be shifted down the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n         * @returns {Drawing} Excel Drawing with attached methods\n         */\n        value: function anchor(type, from, to) {\n            if (type === 'twoCellAnchor') {\n                if (from === undefined || to === undefined) {\n                    throw new TypeError('twoCellAnchor requires both from and two markers');\n                }\n                this.editAs = 'oneCell';\n            }\n            this.anchorType = type;\n            this.anchorFrom = from;\n            this.anchorTo = to;\n            return this;\n        }\n\n        /**\n         * @alias Drawing.position\n         * @desc The position of the top left corner of the image on the Worksheet\n         * @func Drawing.position\n         * @param {ST_PositiveUniversalMeasure} cx Postion from left of Worksheet edge\n         * @param {ST_PositiveUniversalMeasure} cy Postion from top of Worksheet edge\n         */\n\n    }, {\n        key: 'position',\n        value: function position(cx, cy) {\n            this.anchorType = 'absoluteAnchor';\n            var thisCx = new EMU(cx);\n            var thisCy = new EMU(cy);\n            this._position = new Point(thisCx.value, thisCy.value);\n        }\n    }, {\n        key: 'anchorType',\n        get: function get() {\n            return this._anchorType;\n        },\n        set: function set(type) {\n            var types = ['absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'];\n            if (types.indexOf(type) < 0) {\n                throw new TypeError('Invalid option for anchor type. anchorType must be one of ' + types.join(', '));\n            }\n            this._anchorType = type;\n        }\n    }, {\n        key: 'editAs',\n        get: function get() {\n            return this._editAs;\n        },\n        set: function set(val) {\n            var types = ['absolute', 'oneCell', 'twoCell'];\n            if (types.indexOf(val) < 0) {\n                throw new TypeError('Invalid option for editAs. editAs must be one of ' + types.join(', '));\n            }\n            this._editAs = val;\n        }\n    }, {\n        key: 'anchorFrom',\n        get: function get() {\n            return this._anchorFrom;\n        },\n        set: function set(obj) {\n            if (obj !== undefined && obj instanceof Object) {\n                this._anchorFrom = new CTMarker(obj.col - 1, obj.colOff, obj.row - 1, obj.rowOff);\n            }\n        }\n    }, {\n        key: 'anchorTo',\n        get: function get() {\n            return this._anchorTo;\n        },\n        set: function set(obj) {\n            if (obj !== undefined && obj instanceof Object) {\n                this._anchorTo = new CTMarker(obj.col - 1, obj.colOff, obj.row - 1, obj.rowOff);\n            }\n        }\n    }]);\n\n    return Drawing;\n}();\n\nmodule.exports = Drawing;\n//# sourceMappingURL=drawing.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/classes/ctMarker.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EMU = require('./emu.js');\n\nvar CTMarker = function () {\n    /**\n     * Element representing an Excel position marker\n     * @param {Number} colId Column Number\n     * @param {String} colOffset Offset stating how far right to shift the start edge\n     * @param {Number} rowId Row Number\n     * @param {String} rowOffset Offset stating how far down to shift the start edge\n     * @property {Number} col Column number\n     * @property {EMU} colOff EMUs of right shift\n     * @property {Number} row Row number\n     * @property {EMU} rowOff EMUs of top shift\n     * @returns {CTMarker} Excel CTMarker \n     */\n    function CTMarker(colId, colOffset, rowId, rowOffset) {\n        _classCallCheck(this, CTMarker);\n\n        this._col = colId;\n        this._colOff = new EMU(colOffset);\n        this._row = rowId;\n        this._rowOff = new EMU(rowOffset);\n    }\n\n    _createClass(CTMarker, [{\n        key: 'col',\n        get: function get() {\n            return this._col;\n        },\n        set: function set(val) {\n            if (parseInt(val, 10) !== val || val < 0) {\n                throw new TypeError('CTMarker column must be a positive integer');\n            }\n            this._col = val;\n        }\n    }, {\n        key: 'row',\n        get: function get() {\n            return this._row;\n        },\n        set: function set(val) {\n            if (parseInt(val, 10) !== val || val < 0) {\n                throw new TypeError('CTMarker row must be a positive integer');\n            }\n            this._row = val;\n        }\n    }, {\n        key: 'colOff',\n        get: function get() {\n            return this._colOff.value;\n        },\n        set: function set(val) {\n            this._colOff = new EMU(val);\n        }\n    }, {\n        key: 'rowOff',\n        get: function get() {\n            return this._rowOff.value;\n        },\n        set: function set(val) {\n            this._rowOff = new EMU(val);\n        }\n    }]);\n\n    return CTMarker;\n}();\n\nmodule.exports = CTMarker;\n//# sourceMappingURL=ctMarker.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/classes/emu.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EMU = function () {\n\n    /** \n     * The EMU was created in order to be able to evenly divide in both English and Metric units\n     * @class EMU\n     * @param {String} Number of EMUs or string representation of length in mm, cm or in. i.e. '10.5mm'\n     * @property {Number} value Number of EMUs\n     * @returns {EMU} Number of EMUs \n     */\n    function EMU(val) {\n        _classCallCheck(this, EMU);\n\n        this._value;\n        this.value = val;\n    }\n\n    _createClass(EMU, [{\n        key: 'toInt',\n\n\n        /**\n         * @alias EMU.toInt\n         * @desc Returns the number of EMUs as integer\n         * @func EMU.toInt\n         * @returns {Number} Number of EMUs\n         */\n        value: function toInt() {\n            return this._value;\n        }\n\n        /**\n         * @alias EMU.toInch\n         * @desc Returns the number of Inches for the EMUs\n         * @func EMU.toInch\n         * @returns {Number} Number of Inches for the EMUs\n         */\n\n    }, {\n        key: 'toInch',\n        value: function toInch() {\n            return this._value / 914400;\n        }\n\n        /**\n         * @alias EMU.toCM\n         * @desc Returns the number of Centimeters for the EMUs\n         * @func EMU.toCM\n         * @returns {Number} Number of Centimeters for the EMUs\n         */\n\n    }, {\n        key: 'toCM',\n        value: function toCM() {\n            return this._value / 360000;\n        }\n    }, {\n        key: 'value',\n        get: function get() {\n            return this._value;\n        },\n        set: function set(val) {\n            if (val === undefined) {\n                this._value = 0;\n            } else if (typeof val === 'number') {\n                this._value = val ? parseInt(val) : 0;\n            } else if (typeof val === 'string') {\n                var re = new RegExp('[0-9]+(\\.[0-9]+)?(mm|cm|in)');\n                if (re.test(val) === true) {\n                    var measure = parseFloat(/[0-9]+(\\.[0-9]+)?/.exec(val)[0]);\n                    var unit = /(mm|cm|in)/.exec(val)[0];\n\n                    switch (unit) {\n                        case 'mm':\n                            this._value = parseInt(measure * 36000);\n                            break;\n\n                        case 'cm':\n                            this._value = parseInt(measure * 360000);\n                            break;\n\n                        case 'in':\n                            this._value = parseInt(measure * 914400);\n                            break;\n                    }\n                } else {\n                    throw new TypeError('EMUs must be specified as whole integer EMUs or Floats immediately followed by unit of measure in cm, mm, or in. i.e. \"1.5in\"');\n                }\n            }\n        }\n    }]);\n\n    return EMU;\n}();\n\nmodule.exports = EMU;\n\n/*\nM.4.1.1 EMU Unit of Measurement\n\n1 emu  = 1/914400 in = 1/360000 cm\n\nThroughout ECMA-376, the EMU is used as a unit of measurement for length. An EMU is defined as follows:\nThe EMU was created in order to be able to evenly divide in both English and Metric units, in order to \navoid rounding errors during the calculation. The usage of EMUs also facilitates a more seamless system \nswitch and interoperability between different locales utilizing different units of measurement. \nEMUs define an integer based, high precision coordinate system.\n*/\n//# sourceMappingURL=emu.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/classes/point.js":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Point =\n/** \n * An XY coordinate point on the Worksheet with 0.0 being top left corner\n * @class Point\n * @property {Number} x X coordinate of Point\n * @property {Number} y Y coordinate of Point\n * @returns {Point} Excel Point\n */\nfunction Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n};\n\nmodule.exports = Point;\n//# sourceMappingURL=point.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/drawing/picture.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Drawing = require('./drawing.js');\nvar path = require('path');\nvar imgsz = require('image-size');\nvar mime = require('mime');\n\nvar EMU = require('../classes/emu.js');\nvar xmlbuilder = require('xmlbuilder');\n\nvar Picture = function (_Drawing) {\n    _inherits(Picture, _Drawing);\n\n    /**\n     * Element representing an Excel Picture subclass of Drawing\n     * @property {String} kind Kind of picture (currently only image is supported)\n     * @property {String} contentType Mime type of image\n     * @property {String} type ooxml schema\n     * @property {String} imagePath Filesystem path to image\n     * @property {String} name Name of image\n     * @property {String} description Description of image\n     * @property {String} title Title of image\n     * @property {String} id ID of image\n     * @property {String} noGrp pickLocks property\n     * @property {String} noSelect pickLocks property\n     * @property {String} noRot pickLocks property\n     * @property {String} noChangeAspect pickLocks property\n     * @property {String} noMove pickLocks property\n     * @property {String} noResize pickLocks property\n     * @property {String} noEditPoints pickLocks property\n     * @property {String} noAdjustHandles pickLocks property\n     * @property {String} noChangeArrowheads pickLocks property\n     * @property {String} noChangeShapeType pickLocks property\n     * @returns {Picture} Excel Picture  pickLocks property\n     */\n    function Picture(opts) {\n        _classCallCheck(this, Picture);\n\n        var _this = _possibleConstructorReturn(this, (Picture.__proto__ || Object.getPrototypeOf(Picture)).call(this));\n\n        _this.kind = 'image';\n        _this.contentType = mime.lookup(opts.path);\n        _this.type = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image';\n        _this.imagePath = opts.path;\n        _this._name = path.basename(opts.path);\n        _this._descr = null;\n        _this._title = null;\n        _this._id;\n        // picLocks §20.1.2.2.31 picLocks (Picture Locks)\n        _this.noGrp;\n        _this.noSelect;\n        _this.noRot;\n        _this.noChangeAspect = true;\n        _this.noMove;\n        _this.noResize;\n        _this.noEditPoints;\n        _this.noAdjustHandles;\n        _this.noChangeArrowheads;\n        _this.noChangeShapeType;\n        if (['oneCellAnchor', 'twoCellAnchor'].indexOf(opts.position.type) >= 0) {\n            _this.anchor(opts.position.type, opts.position.from, opts.position.to);\n        } else if (opts.position.type === 'absoluteAnchor') {\n            _this.position(opts.position.x, opts.position.y);\n        } else {\n            throw new TypeError('Invalid option for anchor type. anchorType must be one of oneCellAnchor, twoCellAnchor, or absoluteAnchor');\n        }\n        return _this;\n    }\n\n    _createClass(Picture, [{\n        key: 'addToXMLele',\n\n\n        /**\n         * @alias Picture.addToXMLele\n         * @desc When generating Workbook output, attaches pictures to the drawings xml file\n         * @func Picture.addToXMLele\n         * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n         */\n        value: function addToXMLele(ele) {\n\n            var anchorEle = ele.ele('xdr:' + this.anchorType);\n\n            if (this.editAs !== null) {\n                anchorEle.att('editAs', this.editAs);\n            }\n\n            if (this.anchorType === 'absoluteAnchor') {\n                anchorEle.ele('xdr:pos').att('x', this._position.x).att('y', this._position.y);\n            }\n\n            if (this.anchorType !== 'absoluteAnchor') {\n                var af = this.anchorFrom;\n                var afEle = anchorEle.ele('xdr:from');\n                afEle.ele('xdr:col').text(af.col);\n                afEle.ele('xdr:colOff').text(af.colOff);\n                afEle.ele('xdr:row').text(af.row);\n                afEle.ele('xdr:rowOff').text(af.rowOff);\n            }\n\n            if (this.anchorTo && this.anchorType === 'twoCellAnchor') {\n                var at = this.anchorTo;\n                var atEle = anchorEle.ele('xdr:to');\n                atEle.ele('xdr:col').text(at.col);\n                atEle.ele('xdr:colOff').text(at.colOff);\n                atEle.ele('xdr:row').text(at.row);\n                atEle.ele('xdr:rowOff').text(at.rowOff);\n            }\n\n            if (this.anchorType === 'oneCellAnchor' || this.anchorType === 'absoluteAnchor') {\n                anchorEle.ele('xdr:ext').att('cx', this.width).att('cy', this.height);\n            }\n\n            var picEle = anchorEle.ele('xdr:pic');\n            var nvPicPrEle = picEle.ele('xdr:nvPicPr');\n            var cNvPrEle = nvPicPrEle.ele('xdr:cNvPr');\n            cNvPrEle.att('descr', this.description);\n            cNvPrEle.att('id', this.id + 1);\n            cNvPrEle.att('name', this.name);\n            cNvPrEle.att('title', this.title);\n            var cNvPicPrEle = nvPicPrEle.ele('xdr:cNvPicPr');\n\n            this.noGrp === true ? cNvPicPrEle.ele('a:picLocks').att('noGrp', 1) : null;\n            this.noSelect === true ? cNvPicPrEle.ele('a:picLocks').att('noSelect', 1) : null;\n            this.noRot === true ? cNvPicPrEle.ele('a:picLocks').att('noRot', 1) : null;\n            this.noChangeAspect === true ? cNvPicPrEle.ele('a:picLocks').att('noChangeAspect', 1) : null;\n            this.noMove === true ? cNvPicPrEle.ele('a:picLocks').att('noMove', 1) : null;\n            this.noResize === true ? cNvPicPrEle.ele('a:picLocks').att('noResize', 1) : null;\n            this.noEditPoints === true ? cNvPicPrEle.ele('a:picLocks').att('noEditPoints', 1) : null;\n            this.noAdjustHandles === true ? cNvPicPrEle.ele('a:picLocks').att('noAdjustHandles', 1) : null;\n            this.noChangeArrowheads === true ? cNvPicPrEle.ele('a:picLocks').att('noChangeArrowheads', 1) : null;\n            this.noChangeShapeType === true ? cNvPicPrEle.ele('a:picLocks').att('noChangeShapeType', 1) : null;\n\n            var blipFillEle = picEle.ele('xdr:blipFill');\n            blipFillEle.ele('a:blip').att('r:embed', this.rId).att('xmlns:r', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships');\n            blipFillEle.ele('a:stretch').ele('a:fillRect');\n\n            var spPrEle = picEle.ele('xdr:spPr');\n            var xfrmEle = spPrEle.ele('a:xfrm');\n            xfrmEle.ele('a:off').att('x', 0).att('y', 0);\n            xfrmEle.ele('a:ext').att('cx', this.width).att('cy', this.height);\n\n            var prstGeom = spPrEle.ele('a:prstGeom').att('prst', 'rect');\n            prstGeom.ele('a:avLst');\n\n            anchorEle.ele('xdr:clientData');\n        }\n    }, {\n        key: 'name',\n        get: function get() {\n            return this._name;\n        },\n        set: function set(newName) {\n            this._name = newName;\n        }\n    }, {\n        key: 'id',\n        get: function get() {\n            return this._id;\n        },\n        set: function set(id) {\n            this._id = id;\n        }\n    }, {\n        key: 'rId',\n        get: function get() {\n            return 'rId' + this._id;\n        }\n    }, {\n        key: 'description',\n        get: function get() {\n            return this._descr !== null ? this._descr : this._name;\n        },\n        set: function set(desc) {\n            this._descr = desc;\n        }\n    }, {\n        key: 'title',\n        get: function get() {\n            return this._title !== null ? this._title : this._name;\n        },\n        set: function set(title) {\n            this._title = title;\n        }\n    }, {\n        key: 'extension',\n        get: function get() {\n            return path.extname(this.imagePath).substr(1);\n        }\n    }, {\n        key: 'width',\n        get: function get() {\n            var pxWidth = imgsz(this.imagePath).width;\n            var inWidth = pxWidth / 96;\n            var emu = new EMU(inWidth + 'in');\n            return emu.value;\n        }\n    }, {\n        key: 'height',\n        get: function get() {\n            var pxHeight = imgsz(this.imagePath).height;\n            var inHeight = pxHeight / 96;\n            var emu = new EMU(inHeight + 'in');\n            return emu.value;\n        }\n    }]);\n\n    return Picture;\n}(Drawing);\n\nmodule.exports = Picture;\n//# sourceMappingURL=picture.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/builder.js":"'use strict';\n\nvar xml = require('xmlbuilder');\nvar utils = require('../utils.js');\nvar types = require('../types/index.js');\nvar hyperlinks = require('./classes/hyperlink');\nvar Picture = require('../drawing/picture.js');\n\nvar _addSheetPr = function _addSheetPr(promiseObj) {\n    // §18.3.1.82 sheetPr (Sheet Properties)\n    return new Promise(function (resolve, reject) {\n        var o = promiseObj.ws.opts;\n\n        // Check if any option that would require the sheetPr element to be added exists\n        if (o.printOptions.fitToHeight !== null || o.printOptions.fitToWidth !== null || o.outline.summaryBelow !== null || o.autoFilter.ref !== null || o.outline.summaryRight) {\n            var ele = promiseObj.xml.ele('sheetPr');\n\n            if (o.autoFilter.ref) {\n                ele.att('enableFormatConditionsCalculation', 1);\n                ele.att('filterMode', 1);\n            }\n\n            if (o.outline.summaryBelow !== null || o.outline.summaryRight !== null) {\n                var outlineEle = ele.ele('outlinePr');\n                outlineEle.att('applyStyles', 1);\n                o.outline.summaryBelow === true ? outlineEle.att('summaryBelow', 1) : null;\n                o.outline.summaryRight === true ? outlineEle.att('summaryRight', 1) : null;\n                outlineEle.up();\n            }\n\n            // §18.3.1.65 pageSetUpPr (Page Setup Properties)\n            if (o.pageSetup.fitToHeight !== null || o.pageSetup.fitToWidth !== null) {\n                ele.ele('pageSetUpPr').att('fitToPage', 1).up();\n            }\n            ele.up();\n        }\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addDimension = function _addDimension(promiseObj) {\n    // §18.3.1.35 dimension (Worksheet Dimensions)\n    return new Promise(function (resolve, reject) {\n        var firstCell = 'A1';\n        var lastCell = '' + utils.getExcelAlpha(promiseObj.ws.lastUsedCol) + promiseObj.ws.lastUsedRow;\n        var ele = promiseObj.xml.ele('dimension');\n        ele.att('ref', firstCell + ':' + lastCell);\n        ele.up();\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addSheetViews = function _addSheetViews(promiseObj) {\n    // §18.3.1.88 sheetViews (Sheet Views)\n    return new Promise(function (resolve, reject) {\n        var o = promiseObj.ws.opts.sheetView;\n        var ele = promiseObj.xml.ele('sheetViews');\n        var tabSelected = promiseObj.ws.opts;\n        var sv = ele.ele('sheetView').att('tabSelected', o.tabSelected).att('workbookViewId', o.workbookViewId).att('rightToLeft', o.rightToLeft).att('zoomScale', o.zoomScale).att('zoomScaleNormal', o.zoomScaleNormal).att('zoomScalePageLayoutView', o.zoomScalePageLayoutView);\n\n        var modifiedPaneParams = [];\n        Object.keys(o.pane).forEach(function (k) {\n            if (o.pane[k] !== null) {\n                modifiedPaneParams.push(k);\n            }\n        });\n        if (modifiedPaneParams.length > 0) {\n            var pEle = sv.ele('pane');\n            o.pane.xSplit !== null ? pEle.att('xSplit', o.pane.xSplit) : null;\n            o.pane.ySplit !== null ? pEle.att('ySplit', o.pane.ySplit) : null;\n            o.pane.topLeftCell !== null ? pEle.att('topLeftCell', o.pane.topLeftCell) : null;\n            o.pane.activePane !== null ? pEle.att('activePane', o.pane.activePane) : null;\n            o.pane.state !== null ? pEle.att('state', o.pane.state) : null;\n            pEle.up();\n        }\n        sv.up();\n        ele.up();\n        resolve(promiseObj);\n    });\n};\n\nvar _addSheetFormatPr = function _addSheetFormatPr(promiseObj) {\n    // §18.3.1.81 sheetFormatPr (Sheet Format Properties)\n    return new Promise(function (resolve, reject) {\n        var o = promiseObj.ws.opts.sheetFormat;\n        var ele = promiseObj.xml.ele('sheetFormatPr');\n\n        o.baseColWidth !== null ? ele.att('baseColWidth', o.baseColWidth) : null;\n        o.defaultColWidth !== null ? ele.att('defaultColWidth', o.defaultColWidth) : null;\n        o.defaultRowHeight !== null ? ele.att('defaultRowHeight', o.defaultRowHeight) : ele.att('defaultRowHeight', 16);\n        o.thickBottom !== null ? ele.att('thickBottom', utils.boolToInt(o.thickBottom)) : null;\n        o.thickTop !== null ? ele.att('thickTop', utils.boolToInt(o.thickTop)) : null;\n\n        if (typeof o.defaultRowHeight === 'number') {\n            ele.att('customHeight', '1');\n        }\n        ele.up();\n        resolve(promiseObj);\n    });\n};\n\nvar _addCols = function _addCols(promiseObj) {\n    // §18.3.1.17 cols (Column Information)\n    return new Promise(function (resolve, reject) {\n\n        if (promiseObj.ws.columnCount > 0) {\n            var colsEle = promiseObj.xml.ele('cols');\n\n            for (var colId in promiseObj.ws.cols) {\n                var col = promiseObj.ws.cols[colId];\n                var colEle = colsEle.ele('col');\n\n                col.min !== null ? colEle.att('min', col.min) : null;\n                col.max !== null ? colEle.att('max', col.max) : null;\n                col.width !== null ? colEle.att('width', col.width) : null;\n                col.style !== null ? colEle.att('style', col.style) : null;\n                col.hidden !== null ? colEle.att('hidden', utils.boolToInt(col.hidden)) : null;\n                col.customWidth !== null ? colEle.att('customWidth', utils.boolToInt(col.customWidth)) : null;\n                col.outlineLevel !== null ? colEle.att('outlineLevel', col.outlineLevel) : null;\n                col.collapsed !== null ? colEle.att('collapsed', utils.boolToInt(col.collapsed)) : null;\n                colEle.up();\n            }\n            colsEle.up();\n        }\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addSheetData = function _addSheetData(promiseObj) {\n    // §18.3.1.80 sheetData (Sheet Data)\n    return new Promise(function (resolve, reject) {\n\n        var ele = promiseObj.xml.ele('sheetData');\n        var rows = Object.keys(promiseObj.ws.rows);\n\n        var processRows = function processRows(theseRows) {\n            for (var r = 0; r < theseRows.length; r++) {\n                var thisRow = promiseObj.ws.rows[theseRows[r]];\n                thisRow.cellRefs.sort(utils.sortCellRefs);\n\n                var rEle = ele.ele('row');\n\n                rEle.att('r', thisRow.r);\n                rEle.att('spans', thisRow.spans);\n                thisRow.s !== null ? rEle.att('s', thisRow.s) : null;\n                thisRow.customFormat !== null ? rEle.att('customFormat', thisRow.customFormat) : null;\n                thisRow.ht !== null ? rEle.att('ht', thisRow.ht) : null;\n                thisRow.hidden !== null ? rEle.att('hidden', thisRow.hidden) : null;\n                thisRow.customHeight === true || typeof promiseObj.ws.opts.sheetFormat.defaultRowHeight === 'number' ? rEle.att('customHeight', 1) : null;\n                thisRow.outlineLevel !== null ? rEle.att('outlineLevel', thisRow.outlineLevel) : null;\n                thisRow.collapsed !== null ? rEle.att('collapsed', thisRow.collapsed) : null;\n                thisRow.thickTop !== null ? rEle.att('thickTop', thisRow.thickTop) : null;\n                thisRow.thickBot !== null ? rEle.att('thickBot', thisRow.thickBot) : null;\n\n                for (var i = 0; i < thisRow.cellRefs.length; i++) {\n                    promiseObj.ws.cells[thisRow.cellRefs[i]].addToXMLele(rEle);\n                }\n\n                rEle.up();\n            }\n\n            processNextRows();\n        };\n\n        var processNextRows = function processNextRows() {\n            var theseRows = rows.splice(0, 500);\n            if (theseRows.length === 0) {\n                ele.up();\n                return resolve(promiseObj);\n            }\n            processRows(theseRows);\n        };\n\n        processNextRows();\n    });\n};\n\nvar _addSheetProtection = function _addSheetProtection(promiseObj) {\n    // §18.3.1.85 sheetProtection (Sheet Protection Options)\n    return new Promise(function (resolve, reject) {\n        var o = promiseObj.ws.opts.sheetProtection;\n        var includeSheetProtection = false;\n        Object.keys(o).forEach(function (k) {\n            if (o[k] !== null) {\n                includeSheetProtection = true;\n            }\n        });\n\n        if (includeSheetProtection) {\n            (function () {\n                // Set required fields with defaults if not specified\n                o.sheet = o.sheet !== null ? o.sheet : true;\n                o.objects = o.objects !== null ? o.objects : true;\n                o.scenarios = o.scenarios !== null ? o.scenarios : true;\n\n                var ele = promiseObj.xml.ele('sheetProtection');\n                Object.keys(o).forEach(function (k) {\n                    if (o[k] !== null) {\n                        if (k === 'password') {\n                            ele.att('password', utils.getHashOfPassword(o[k]));\n                        } else {\n                            ele.att(k, utils.boolToInt(o[k]));\n                        }\n                    }\n                });\n                ele.up();\n            })();\n        }\n        resolve(promiseObj);\n    });\n};\n\nvar _addAutoFilter = function _addAutoFilter(promiseObj) {\n    // §18.3.1.2 autoFilter (AutoFilter Settings)\n    return new Promise(function (resolve, reject) {\n        var o = promiseObj.ws.opts.autoFilter;\n\n        if (typeof o.startRow === 'number') {\n            var ele = promiseObj.xml.ele('autoFilter');\n            var filterRow = promiseObj.ws.rows[o.startRow];\n\n            o.startCol = typeof o.startCol === 'number' ? o.startCol : null;\n            o.endCol = typeof o.endCol === 'number' ? o.endCol : null;\n\n            if (typeof o.endRow !== 'number') {\n                var firstEmptyRow = undefined;\n                var curRow = o.startRow;\n                while (firstEmptyRow === undefined) {\n                    if (!promiseObj.ws.rows[curRow]) {\n                        firstEmptyRow = curRow;\n                    } else {\n                        curRow++;\n                    }\n                }\n\n                o.endRow = firstEmptyRow - 1;\n            }\n\n            // Columns to sort not manually set. filter all columns in this row containing data.\n            if (typeof o.startCol !== 'number' || typeof o.endCol !== 'number') {\n                o.startCol = filterRow.firstColumn;\n                o.endCol = filterRow.lastColumn;\n            }\n\n            var startCell = utils.getExcelAlpha(o.startCol) + o.startRow;\n            var endCell = utils.getExcelAlpha(o.endCol) + o.endRow;\n\n            ele.att('ref', startCell + ':' + endCell);\n            promiseObj.ws.wb.definedNameCollection.addDefinedName({\n                hidden: 1,\n                localSheetId: promiseObj.ws.localSheetId,\n                name: '_xlnm._FilterDatabase',\n                refFormula: '\\'' + promiseObj.ws.name + '\\'!' + '$' + utils.getExcelAlpha(o.startCol) + '$' + o.startRow + ':' + '$' + utils.getExcelAlpha(o.endCol) + '$' + o.endRow\n            });\n            ele.up();\n        }\n        resolve(promiseObj);\n    });\n};\n\nvar _addMergeCells = function _addMergeCells(promiseObj) {\n    // §18.3.1.55 mergeCells (Merge Cells)\n    return new Promise(function (resolve, reject) {\n\n        if (promiseObj.ws.mergedCells instanceof Array && promiseObj.ws.mergedCells.length > 0) {\n            (function () {\n                var ele = promiseObj.xml.ele('mergeCells').att('count', promiseObj.ws.mergedCells.length);\n                promiseObj.ws.mergedCells.forEach(function (cr) {\n                    ele.ele('mergeCell').att('ref', cr).up();\n                });\n                ele.up();\n            })();\n        }\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addConditionalFormatting = function _addConditionalFormatting(promiseObj) {\n    // §18.3.1.18 conditionalFormatting (Conditional Formatting)\n    return new Promise(function (resolve, reject) {\n        promiseObj.ws.cfRulesCollection.addToXMLele(promiseObj.xml);\n        resolve(promiseObj);\n    });\n};\n\nvar _addHyperlinks = function _addHyperlinks(promiseObj) {\n    // §18.3.1.48 hyperlinks (Hyperlinks)\n    return new Promise(function (resolve, reject) {\n        promiseObj.ws.hyperlinkCollection.addToXMLele(promiseObj.xml);\n        resolve(promiseObj);\n    });\n};\n\nvar _addDataValidations = function _addDataValidations(promiseObj) {\n    // §18.3.1.33 dataValidations (Data Validations)\n    return new Promise(function (resolve, reject) {\n        if (promiseObj.ws.dataValidationCollection.length > 0) {\n            promiseObj.ws.dataValidationCollection.addToXMLele(promiseObj.xml);\n        }\n        resolve(promiseObj);\n    });\n};\n\nvar _addPrintOptions = function _addPrintOptions(promiseObj) {\n    // §18.3.1.70 printOptions (Print Options)\n    return new Promise(function (resolve, reject) {\n\n        var addPrintOptions = false;\n        var o = promiseObj.ws.opts.printOptions;\n        Object.keys(o).forEach(function (k) {\n            if (o[k] !== null) {\n                addPrintOptions = true;\n            }\n        });\n\n        if (addPrintOptions) {\n            var poEle = promiseObj.xml.ele('printOptions');\n            o.centerHorizontal === true ? poEle.att('horizontalCentered', 1) : null;\n            o.centerVertical === true ? poEle.att('verticalCentered', 1) : null;\n            o.printHeadings === true ? poEle.att('headings', 1) : null;\n            if (o.printGridLines === true) {\n                poEle.att('gridLines', 1);\n                poEle.att('gridLinesSet', 1);\n            }\n            poEle.up();\n        }\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addPageMargins = function _addPageMargins(promiseObj) {\n    // §18.3.1.62 pageMargins (Page Margins)\n    return new Promise(function (resolve, reject) {\n        var o = promiseObj.ws.opts.margins;\n\n        promiseObj.xml.ele('pageMargins').att('left', o.left).att('right', o.right).att('top', o.top).att('bottom', o.bottom).att('header', o.header).att('footer', o.footer).up();\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addPageSetup = function _addPageSetup(promiseObj) {\n    // §18.3.1.63 pageSetup (Page Setup Settings)\n    return new Promise(function (resolve, reject) {\n\n        var addPageSetup = false;\n        var o = promiseObj.ws.opts.pageSetup;\n        Object.keys(o).forEach(function (k) {\n            if (o[k] !== null) {\n                addPageSetup = true;\n            }\n        });\n\n        if (addPageSetup === true) {\n            var psEle = promiseObj.xml.ele('pageSetup');\n            o.paperSize !== null ? psEle.att('paperSize', types.paperSize[o.paperSize]) : null;\n            o.paperHeight !== null ? psEle.att('paperHeight', o.paperHeight) : null;\n            o.paperWidth !== null ? psEle.att('paperWidth', o.paperWidth) : null;\n            o.scale !== null ? psEle.att('scale', o.scale) : null;\n            o.firstPageNumber !== null ? psEle.att('firstPageNumber', o.firstPageNumber) : null;\n            o.fitToWidth !== null ? psEle.att('fitToWidth', o.fitToWidth) : null;\n            o.fitToHeight !== null ? psEle.att('fitToHeight', o.fitToHeight) : null;\n            o.pageOrder !== null ? psEle.att('pageOrder', o.pageOrder) : null;\n            o.orientation !== null ? psEle.att('orientation', o.orientation) : null;\n            o.usePrinterDefaults !== null ? psEle.att('usePrinterDefaults', utils.boolToInt(o.usePrinterDefaults)) : null;\n            o.blackAndWhite !== null ? psEle.att('blackAndWhite', utils.boolToInt(o.blackAndWhite)) : null;\n            o.draft !== null ? psEle.att('draft', utils.boolToInt(o.draft)) : null;\n            o.cellComments !== null ? psEle.att('cellComments', o.cellComments) : null;\n            o.useFirstPageNumber !== null ? psEle.att('useFirstPageNumber', utils.boolToInt(o.useFirstPageNumber)) : null;\n            o.errors !== null ? psEle.att('errors', o.errors) : null;\n            o.horizontalDpi !== null ? psEle.att('horizontalDpi', o.horizontalDpi) : null;\n            o.verticalDpi !== null ? psEle.att('verticalDpi', o.verticalDpi) : null;\n            o.copies !== null ? psEle.att('copies', o.copies) : null;\n            psEle.up();\n        }\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addHeaderFooter = function _addHeaderFooter(promiseObj) {\n    // §18.3.1.46 headerFooter (Header Footer Settings)\n    return new Promise(function (resolve, reject) {\n\n        var addHeaderFooter = false;\n        var o = promiseObj.ws.opts.headerFooter;\n        Object.keys(o).forEach(function (k) {\n            if (o[k] !== null) {\n                addHeaderFooter = true;\n            }\n        });\n\n        if (addHeaderFooter === true) {\n            var hfEle = promiseObj.xml.ele('headerFooter');\n\n            o.alignWithMargins !== null ? hfEle.att('alignWithMargins', utils.boolToInt(o.alignWithMargins)) : null;\n            o.differentFirst !== null ? hfEle.att('differentFirst', utils.boolToInt(o.differentFirst)) : null;\n            o.differentOddEven !== null ? hfEle.att('differentOddEven', utils.boolToInt(o.differentOddEven)) : null;\n            o.scaleWithDoc !== null ? hfEle.att('scaleWithDoc', utils.boolToInt(o.scaleWithDoc)) : null;\n\n            o.oddHeader !== null ? hfEle.ele('oddHeader').text(o.oddHeader).up() : null;\n            o.oddFooter !== null ? hfEle.ele('oddFooter').text(o.oddFooter).up() : null;\n            o.evenHeader !== null ? hfEle.ele('evenHeader').text(o.evenHeader).up() : null;\n            o.evenFooter !== null ? hfEle.ele('evenFooter').text(o.evenFooter).up() : null;\n            o.firstHeader !== null ? hfEle.ele('firstHeader').text(o.firstHeader).up() : null;\n            o.firstFooter !== null ? hfEle.ele('firstFooter').text(o.firstFooter).up() : null;\n            hfEle.up();\n        }\n\n        resolve(promiseObj);\n    });\n};\n\nvar _addDrawing = function _addDrawing(promiseObj) {\n    // §18.3.1.36 drawing (Drawing)\n    return new Promise(function (resolve, reject) {\n        if (!promiseObj.ws.drawingCollection.isEmpty) {\n            var dId = promiseObj.ws.relationships.indexOf('drawing') + 1;\n            promiseObj.xml.ele('drawing').att('r:id', 'rId' + dId).up();\n        }\n        resolve(promiseObj);\n    });\n};\n\nvar sheetXML = function sheetXML(ws) {\n    return new Promise(function (resolve, reject) {\n\n        var xmlProlog = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>';\n        var xmlString = '';\n        var wsXML = xml.begin(function (chunk) {\n            xmlString += chunk;\n        }).ele('worksheet').att('mc:Ignorable', 'x14ac').att('xmlns', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main').att('xmlns:mc', 'http://schemas.openxmlformats.org/markup-compatibility/2006').att('xmlns:r', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships').att('xmlns:x14ac', 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac');\n\n        // Excel complains if specific elements on not in the correct order in the XML doc.\n        var promiseObj = { xml: wsXML, ws: ws };\n\n        _addSheetPr(promiseObj).then(_addDimension).then(_addSheetViews).then(_addSheetFormatPr).then(_addCols).then(_addSheetData).then(_addSheetProtection).then(_addAutoFilter).then(_addMergeCells).then(_addConditionalFormatting).then(_addDataValidations).then(_addHyperlinks).then(_addPrintOptions).then(_addPageMargins).then(_addPageSetup).then(_addHeaderFooter).then(_addDrawing).then(function (promiseObj) {\n            return new Promise(function (resolve, reject) {\n                wsXML.end();\n                resolve(xmlString);\n            });\n        }).then(function (xml) {\n            resolve(xml);\n        }).catch(function (e) {\n            throw new Error(e.stack);\n        });\n    });\n};\n\nvar relsXML = function relsXML(ws) {\n    return new Promise(function (resolve, reject) {\n        var sheetRelRequired = false;\n        if (ws.relationships.length > 0) {\n            sheetRelRequired = true;\n        }\n\n        if (sheetRelRequired === false) {\n            resolve();\n        }\n\n        var relXML = xml.create('Relationships', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        });\n        relXML.att('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');\n\n        ws.relationships.forEach(function (r, i) {\n            var rId = 'rId' + (i + 1);\n            if (r instanceof hyperlinks.Hyperlink) {\n                relXML.ele('Relationship').att('Id', rId).att('Target', r.location).att('TargetMode', 'External').att('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink');\n            } else if (r === 'drawing') {\n                relXML.ele('Relationship').att('Id', rId).att('Target', '../drawings/drawing' + ws.sheetId + '.xml').att('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing');\n            }\n        });\n        var xmlString = relXML.doc().end();\n        resolve(xmlString);\n    });\n};\n\nmodule.exports = { sheetXML: sheetXML, relsXML: relsXML };\n//# sourceMappingURL=builder.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/worksheet/optsValidator.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar types = require('../types/index.js');\n\nvar optsTypes = {\n    'margins': {\n        'bottom': 'Float',\n        'footer': 'Float',\n        'header': 'Float',\n        'left': 'Float',\n        'right': 'Float',\n        'top': 'Float'\n    },\n    'printOptions': {\n        'centerHorizontal': 'Boolean',\n        'centerVertical': 'Boolean',\n        'printGridLines': 'Boolean',\n        'printHeadings': 'Boolean'\n\n    },\n    'pageSetup': {\n        'blackAndWhite': 'Boolean',\n        'cellComments': 'CELL_COMMENTS',\n        'copies': 'Integer',\n        'draft': 'Boolean',\n        'errors': 'PRINT_ERROR',\n        'firstPageNumber': 'Boolean',\n        'fitToHeight': 'Integer',\n        'fitToWidth': 'Integer',\n        'horizontalDpi': 'Integer',\n        'orientation': 'ORIENTATION',\n        'pageOrder': 'PAGE_ORDER',\n        'paperHeight': 'POSITIVE_UNIVERSAL_MEASURE',\n        'paperSize': 'PAPER_SIZE',\n        'paperWidth': 'POSITIVE_UNIVERSAL_MEASURE',\n        'scale': 'Integer',\n        'useFirstPageNumber': 'Boolean',\n        'usePrinterDefaults': 'Boolean',\n        'verticalDpi': 'Integer'\n    },\n    'headerFooter': {\n        'evenFooter': 'String',\n        'evenHeader': 'String',\n        'firstFooter': 'String',\n        'firstHeader': 'String',\n        'oddFooter': 'String',\n        'oddHeader': 'String',\n        'alignWithMargins': 'Boolean',\n        'differentFirst': 'Boolean',\n        'differentOddEven': 'Boolean',\n        'scaleWithDoc': 'Boolean'\n    },\n    'sheetView': {\n        'pane': {\n            'activePane': 'PANE',\n            'state': 'PANE_STATE',\n            'topLeftCell': null,\n            'xSplit': null,\n            'ySplit': null\n        },\n        'tabSelected': null,\n        'workbookViewId': null,\n        'rightToLeft': null,\n        'zoomScale': null,\n        'zoomScaleNormal': null,\n        'zoomScalePageLayoutView': null\n    },\n    'sheetFormat': {\n        'baseColWidth': null,\n        'customHeight': null,\n        'defaultColWidth': null,\n        'defaultRowHeight': null,\n        'outlineLevelCol': null,\n        'outlineLevelRow': null,\n        'thickBottom': null,\n        'thickTop': null,\n        'zeroHeight': null\n    },\n    'sheetProtection': {\n        'autoFilter': null,\n        'deleteColumns': null,\n        'deleteRow': null,\n        'formatCells': null,\n        'formatColumns': null,\n        'formatRows': null,\n        'hashValue': null,\n        'insertColumns': null,\n        'insertHyperlinks': null,\n        'insertRows': null,\n        'objects': null,\n        'password': null,\n        'pivotTables': null,\n        'scenarios': null,\n        'selectLockedCells': null,\n        'selectUnlockedCell': null,\n        'sheet': null,\n        'sort': null\n    },\n    'outline': {\n        'summaryBelow': null\n    },\n    'autoFilter': {\n        'startRow': null,\n        'endRow': null,\n        'startCol': null,\n        'endCol': null,\n        'filters': null\n    }\n};\n\nvar getObjItem = function getObjItem(obj, key) {\n    var returnObj = obj;\n    var levels = key.split('.');\n\n    while (levels.length > 0) {\n        var thisLevelKey = levels.shift();\n        try {\n            returnObj = returnObj[thisLevelKey];\n        } catch (e) {\n            //returnObj = undefined;\n        }\n    }\n    return returnObj;\n};\n\nvar validator = function validator(key, val, type) {\n    switch (type) {\n\n        case 'PAPER_SIZE':\n            var sizes = Object.keys(types.paperSize);\n            if (sizes.indexOf(val) < 0) {\n                throw new TypeError('Invalid value for ' + key + '. Value must be one of ' + sizes.join(', '));\n            }\n            break;\n\n        case 'PAGE_ORDER':\n            types.pageOrder.validate(val);\n            break;\n\n        case 'ORIENTATION':\n            types.orientation.validate(val);\n            break;\n\n        case 'POSITIVE_UNIVERSAL_MEASURE':\n            types.positiveUniversalMeasure.validate(val);\n            break;\n\n        case 'CELL_COMMENTS':\n            types.cellComment.validate(val);\n            break;\n\n        case 'PRINT_ERROR':\n            types.printError.validate(val);\n            break;\n\n        case 'PANE':\n            types.pane.validate(val);\n            break;\n\n        case 'PANE_STATE':\n            types.paneState.validate(val);\n            break;\n\n        case 'Boolean':\n            if ([true, false, 1, 0].indexOf(val) < 0) {\n                throw new TypeError(key + ' expects value of true, false, 1 or 0');\n            }\n            break;\n\n        case 'Float':\n            if (parseFloat(val) !== val) {\n                throw new TypeError(key + ' expects value as a Float number');\n            }\n            break;\n\n        case 'Integer':\n            if (parseInt(val) !== val) {\n                throw new TypeError(key + ' expects value as an Integer');\n            }\n            break;\n\n        case 'String':\n            if (typeof val !== 'string') {\n                throw new TypeError(key + ' expects value as a String');\n            }\n            break;\n\n        default:\n            break;\n    }\n};\n\nvar traverse = function traverse(o, keyParts, func) {\n    for (var i in o) {\n        var thisKeyParts = keyParts.concat(i);\n        var thisKey = thisKeyParts.join('.');\n        var thisType = getObjItem(optsTypes, thisKey);\n\n        if (typeof thisType === 'string') {\n            var thisItem = o[i];\n            func(thisKey, thisItem, thisType);\n        }\n        if (o[i] !== null && _typeof(o[i]) === 'object') {\n            traverse(o[i], thisKeyParts, func);\n        }\n    }\n};\n\nmodule.exports = function (opts) {\n    traverse(opts, [], validator);\n};\n//# sourceMappingURL=optsValidator.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/style/index.js":"'use strict';\n\nmodule.exports = require('./style.js');\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/workbook/dxfCollection.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _ = require('lodash');\nvar Style = require('../style');\nvar util = require('util');\n\nvar DXFItem = function () {\n    // §18.8.14 dxf (Formatting)\n    function DXFItem(style, wb) {\n        _classCallCheck(this, DXFItem);\n\n        this.wb = wb;\n        this.style = style;\n        this.id;\n    }\n\n    _createClass(DXFItem, [{\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            this.style.addDXFtoXMLele(ele);\n        }\n    }, {\n        key: 'dxfId',\n        get: function get() {\n            return this.id;\n        }\n    }]);\n\n    return DXFItem;\n}();\n\nvar DXFCollection = function () {\n    // §18.8.15 dxfs (Formats)\n    function DXFCollection(wb) {\n        _classCallCheck(this, DXFCollection);\n\n        this.wb = wb;\n        this.items = [];\n    }\n\n    _createClass(DXFCollection, [{\n        key: 'add',\n        value: function add(style) {\n            if (!(style instanceof Style)) {\n                style = this.wb.Style(style);\n            }\n\n            var thisItem = void 0;\n            this.items.forEach(function (item) {\n                if (_.equals(item.style.toObject(), style.toObject())) {\n                    return thisItem = item;\n                }\n            });\n            if (!thisItem) {\n                thisItem = new DXFItem(style, this.wb);\n                this.items.push(thisItem);\n                thisItem.id = this.items.length - 1;\n            }\n            return thisItem;\n        }\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var dxfXML = ele.ele('dxfs').att('count', this.length);\n\n            this.items.forEach(function (item) {\n                item.addToXMLele(dxfXML);\n            });\n        }\n    }, {\n        key: 'length',\n        get: function get() {\n            return this.items.length;\n        }\n    }]);\n\n    return DXFCollection;\n}();\n\nmodule.exports = DXFCollection;\n//# sourceMappingURL=dxfCollection.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/workbook/mediaCollection.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar fs = require('fs');\n\nvar MediaCollection = function () {\n    function MediaCollection() {\n        _classCallCheck(this, MediaCollection);\n\n        this.items = [];\n    }\n\n    _createClass(MediaCollection, [{\n        key: 'add',\n        value: function add(filePath) {\n            fs.accessSync(filePath, fs.R_OK);\n            this.items.push(filePath);\n            return this.items.length;\n        }\n    }, {\n        key: 'isEmpty',\n        get: function get() {\n            if (this.items.length === 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }]);\n\n    return MediaCollection;\n}();\n\nmodule.exports = MediaCollection;\n//# sourceMappingURL=mediaCollection.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/classes/definedNameCollection.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DefinedName = function () {\n    //§18.2.5 definedName (Defined Name)\n    function DefinedName(opts) {\n        _classCallCheck(this, DefinedName);\n\n        opts.refFormula !== undefined ? this.refFormula = opts.refFormula : null;\n        opts.name !== undefined ? this.name = opts.name : null;\n        opts.comment !== undefined ? this.comment = opts.comment : null;\n        opts.customMenu !== undefined ? this.customMenu = opts.customMenu : null;\n        opts.description !== undefined ? this.description = opts.description : null;\n        opts.help !== undefined ? this.help = opts.help : null;\n        opts.statusBar !== undefined ? this.statusBar = opts.statusBar : null;\n        opts.localSheetId !== undefined ? this.localSheetId = opts.localSheetId : null;\n        opts.hidden !== undefined ? this.hidden = opts.hidden : null;\n        opts['function'] !== undefined ? this['function'] = opts['function'] : null;\n        opts.vbProcedure !== undefined ? this.vbProcedure = opts.vbProcedure : null;\n        opts.xlm !== undefined ? this.xlm = opts.xlm : null;\n        opts.functionGroupId !== undefined ? this.functionGroupId = opts.functionGroupId : null;\n        opts.shortcutKey !== undefined ? this.shortcutKey = opts.shortcutKey : null;\n        opts.publishToServer !== undefined ? this.publishToServer = opts.publishToServer : null;\n        opts.workbookParameter !== undefined ? this.workbookParameter = opts.workbookParameter : null;\n    }\n\n    _createClass(DefinedName, [{\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var dEle = ele.ele('definedName');\n            this.comment !== undefined ? dEle.att('comment', this.comment) : null;\n            this.customMenu !== undefined ? dEle.att('customMenu', this.customMenu) : null;\n            this.description !== undefined ? dEle.att('description', this.description) : null;\n            this.help !== undefined ? dEle.att('help', this.help) : null;\n            this.statusBar !== undefined ? dEle.att('statusBar', this.statusBar) : null;\n            this.hidden !== undefined ? dEle.att('hidden', this.hidden) : null;\n            this.localSheetId !== undefined ? dEle.att('localSheetId', this.localSheetId) : null;\n            this.name !== undefined ? dEle.att('name', this.name) : null;\n            this['function'] !== undefined ? dEle.att('function', this['function']) : null;\n            this.vbProcedure !== undefined ? dEle.att('vbProcedure', this.vbProcedure) : null;\n            this.xlm !== undefined ? dEle.att('xlm', this.xlm) : null;\n            this.functionGroupId !== undefined ? dEle.att('functionGroupId', this.functionGroupId) : null;\n            this.shortcutKey !== undefined ? dEle.att('shortcutKey', this.shortcutKey) : null;\n            this.publishToServer !== undefined ? dEle.att('publishToServer', this.publishToServer) : null;\n            this.workbookParameter !== undefined ? dEle.att('workbookParameter', this.workbookParameter) : null;\n\n            this.refFormula !== undefined ? dEle.text(this.refFormula) : null;\n        }\n    }]);\n\n    return DefinedName;\n}();\n\nvar DefinedNameCollection = function () {\n    // §18.2.6 definedNames (Defined Names)\n    function DefinedNameCollection() {\n        _classCallCheck(this, DefinedNameCollection);\n\n        this.items = [];\n    }\n\n    _createClass(DefinedNameCollection, [{\n        key: 'addDefinedName',\n        value: function addDefinedName(opts) {\n            var item = new DefinedName(opts);\n            var newLength = this.items.push(item);\n            return this.items[newLength - 1];\n        }\n    }, {\n        key: 'addToXMLele',\n        value: function addToXMLele(ele) {\n            var dnEle = ele.ele('definedNames');\n            this.items.forEach(function (dn) {\n                dn.addToXMLele(dnEle);\n            });\n        }\n    }, {\n        key: 'length',\n        get: function get() {\n            return this.items.length;\n        }\n    }, {\n        key: 'isEmpty',\n        get: function get() {\n            if (this.items.length === 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }]);\n\n    return DefinedNameCollection;\n}();\n\nmodule.exports = DefinedNameCollection;\n//# sourceMappingURL=definedNameCollection.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/distribution/lib/workbook/builder.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar xmlbuilder = require('xmlbuilder');\nvar JSZip = require('jszip');\nvar fs = require('fs');\nvar CTColor = require('../style/classes/ctColor.js');\n\nvar addRootContentTypesXML = function addRootContentTypesXML(promiseObj) {\n    // Required as stated in §12.2\n    return new Promise(function (resolve, reject) {\n        var xml = xmlbuilder.create('Types', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        }).att('xmlns', 'http://schemas.openxmlformats.org/package/2006/content-types');\n\n        var contentTypesAdded = [];\n        promiseObj.wb.sheets.forEach(function (s, i) {\n            if (s.drawingCollection.length > 0) {\n                (function () {\n                    var extensionsAdded = [];\n                    s.drawingCollection.drawings.forEach(function (d) {\n                        if (extensionsAdded.indexOf(d.extension) < 0) {\n                            var typeRef = d.contentType + '.' + d.extension;\n                            if (contentTypesAdded.indexOf(typeRef) < 0) {\n                                xml.ele('Default').att('ContentType', d.contentType).att('Extension', d.extension);\n                            }\n                            extensionsAdded.push(d.extension);\n                        }\n                    });\n                })();\n            }\n        });\n        xml.ele('Default').att('ContentType', 'application/xml').att('Extension', 'xml');\n        xml.ele('Default').att('ContentType', 'application/vnd.openxmlformats-package.relationships+xml').att('Extension', 'rels');\n        xml.ele('Override').att('ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml').att('PartName', '/xl/workbook.xml');\n        promiseObj.wb.sheets.forEach(function (s, i) {\n            xml.ele('Override').att('ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml').att('PartName', '/xl/worksheets/sheet' + (i + 1) + '.xml');\n\n            if (s.drawingCollection.length > 0) {\n                xml.ele('Override').att('ContentType', 'application/vnd.openxmlformats-officedocument.drawing+xml').att('PartName', '/xl/drawings/drawing' + s.sheetId + '.xml');\n            }\n        });\n        xml.ele('Override').att('ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml').att('PartName', '/xl/styles.xml');\n        xml.ele('Override').att('ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml').att('PartName', '/xl/sharedStrings.xml');\n\n        var xmlString = xml.doc().end(promiseObj.xmlOutVars);\n        promiseObj.xlsx.file('[Content_Types].xml', xmlString);\n        resolve(promiseObj);\n    });\n};\n\nvar addRootRelsXML = function addRootRelsXML(promiseObj) {\n    // Required as stated in §12.2\n    return new Promise(function (resolve, reject) {\n        var xml = xmlbuilder.create('Relationships', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        }).att('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');\n\n        xml.ele('Relationship').att('Id', 'rId1').att('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument').att('Target', 'xl/workbook.xml');\n\n        var xmlString = xml.doc().end(promiseObj.xmlOutVars);\n        promiseObj.xlsx.folder('_rels').file('.rels', xmlString);\n        resolve(promiseObj);\n    });\n};\n\nvar addWorkBookXML = function addWorkBookXML(promiseObj) {\n    // Required as stated in §12.2\n    return new Promise(function (resolve, reject) {\n\n        var xml = xmlbuilder.create('workbook', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        });\n        xml.att('mc:Ignorable', 'x15');\n        xml.att('xmlns', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');\n        xml.att('xmlns:mc', 'http://schemas.openxmlformats.org/markup-compatibility/2006');\n        xml.att('xmlns:r', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships');\n        xml.att('xmlns:x15', 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main');\n\n        var booksViewEle = xml.ele('bookViews');\n        booksViewEle.ele('workbookView').att('xWindow', '240').att('yWindow', '15').att('windowWidth', '8505').att('windowHeight', '6240');\n\n        var sheetsEle = xml.ele('sheets');\n        promiseObj.wb.sheets.forEach(function (s, i) {\n            sheetsEle.ele('sheet').att('name', s.name).att('sheetId', i + 1).att('r:id', 'rId' + (i + 1));\n        });\n\n        if (!promiseObj.wb.definedNameCollection.isEmpty) {\n            promiseObj.wb.definedNameCollection.addToXMLele(xml);\n        }\n\n        var xmlString = xml.doc().end(promiseObj.xmlOutVars);\n        promiseObj.xlsx.folder('xl').file('workbook.xml', xmlString);\n        resolve(promiseObj);\n    });\n};\n\nvar addWorkBookRelsXML = function addWorkBookRelsXML(promiseObj) {\n    // Required as stated in §12.2\n    return new Promise(function (resolve, reject) {\n\n        var xml = xmlbuilder.create('Relationships', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        }).att('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');\n\n        xml.ele('Relationship').att('Id', 'rId' + (promiseObj.wb.sheets.length + 1)).att('Target', 'sharedStrings.xml').att('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings');\n\n        xml.ele('Relationship').att('Id', 'rId' + (promiseObj.wb.sheets.length + 2)).att('Target', 'styles.xml').att('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles');\n\n        promiseObj.wb.sheets.forEach(function (s, i) {\n            xml.ele('Relationship').att('Id', 'rId' + (i + 1)).att('Target', 'worksheets/sheet' + (i + 1) + '.xml').att('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\n        });\n\n        var xmlString = xml.doc().end(promiseObj.xmlOutVars);\n        promiseObj.xlsx.folder('xl').folder('_rels').file('workbook.xml.rels', xmlString);\n        resolve(promiseObj);\n    });\n};\n\nvar addWorkSheetsXML = function addWorkSheetsXML(promiseObj) {\n    // Required as stated in §12.2\n    return new Promise(function (resolve, reject) {\n\n        var curSheet = 0;\n\n        var processNextSheet = function processNextSheet() {\n            var thisSheet = promiseObj.wb.sheets[curSheet];\n            if (thisSheet) {\n                curSheet++;\n                thisSheet.generateXML().then(function (xml) {\n                    return new Promise(function (resolve) {\n                        // Add worksheet to zip\n                        promiseObj.xlsx.folder('xl').folder('worksheets').file('sheet' + curSheet + '.xml', xml);\n\n                        resolve();\n                    });\n                }).then(function () {\n                    return thisSheet.generateRelsXML();\n                }).then(function (xml) {\n                    return new Promise(function (resolve) {\n                        if (xml) {\n                            promiseObj.xlsx.folder('xl').folder('worksheets').folder('_rels').file('sheet' + curSheet + '.xml.rels', xml);\n                        }\n                        resolve();\n                    });\n                }).then(processNextSheet).catch(function (e) {\n                    promiseObj.wb.logger.error(e.stack);\n                });\n            } else {\n                resolve(promiseObj);\n            }\n        };\n        processNextSheet();\n    });\n};\n\n/**\n * Generate XML for SharedStrings.xml file and add it to zip file. Called from _writeToBuffer()\n * @private\n * @memberof WorkBook\n * @param {Object} promiseObj object containing jszip instance, workbook intance and xmlvars\n * @return {Promise} Resolves with promiseObj\n */\nvar addSharedStringsXML = function addSharedStringsXML(promiseObj) {\n    // §12.3.15 Shared String Table Part\n    return new Promise(function (resolve, reject) {\n\n        var xml = xmlbuilder.create('sst', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        }).att('count', promiseObj.wb.sharedStrings.length).att('uniqueCount', promiseObj.wb.sharedStrings.length).att('xmlns', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');\n\n        promiseObj.wb.sharedStrings.forEach(function (s) {\n            if (typeof s === 'string') {\n                xml.ele('si').ele('t').txt(s);\n            } else if (s instanceof Array) {\n                (function () {\n\n                    var thisSI = xml.ele('si');\n                    var theseRuns = []; // §18.4.4 r (Rich Text Run)\n                    var currProps = {};\n                    var curRun = void 0;\n                    var i = 0;\n                    while (i < s.length) {\n                        if (typeof s[i] === 'string') {\n                            if (curRun === undefined) {\n                                theseRuns.push({\n                                    props: {},\n                                    text: ''\n                                });\n                                curRun = theseRuns[theseRuns.length - 1];\n                            }\n                            curRun.text = curRun.text + s[i];\n                        } else if (_typeof(s[i]) === 'object') {\n                            theseRuns.push({\n                                props: {},\n                                text: ''\n                            });\n                            curRun = theseRuns[theseRuns.length - 1];\n                            Object.keys(s[i]).forEach(function (k) {\n                                currProps[k] = s[i][k];\n                            });\n                            Object.keys(currProps).forEach(function (k) {\n                                curRun.props[k] = currProps[k];\n                            });\n                            if (s[i].value !== undefined) {\n                                curRun.text = s[i].value;\n                            }\n                        }\n                        i++;\n                    }\n\n                    theseRuns.forEach(function (run) {\n                        if (Object.keys(run).length < 1) {\n                            thisSI.ele('t', run.text).att('xml:space', 'preserve');\n                        } else {\n                            var thisRun = thisSI.ele('r');\n                            var thisRunProps = thisRun.ele('rPr');\n                            typeof run.props.name === 'string' ? thisRunProps.ele('rFont').att('val', run.props.name) : null;\n                            run.props.bold === true ? thisRunProps.ele('b') : null;\n                            run.props.italics === true ? thisRunProps.ele('i') : null;\n                            run.props.strike === true ? thisRunProps.ele('strike') : null;\n                            run.props.outline === true ? thisRunProps.ele('outline') : null;\n                            run.props.shadow === true ? thisRunProps.ele('shadow') : null;\n                            run.props.condense === true ? thisRunProps.ele('condense') : null;\n                            run.props.extend === true ? thisRunProps.ele('extend') : null;\n                            if (typeof run.props.color === 'string') {\n                                var thisColor = new CTColor(run.props.color);\n                                thisColor.addToXMLele(thisRunProps);\n                            }\n                            typeof run.props.size === 'number' ? thisRunProps.ele('sz').att('val', run.props.size) : null;\n                            run.props.underline === true ? thisRunProps.ele('u') : null;\n                            typeof run.props.vertAlign === 'string' ? thisRunProps.ele('vertAlign').att('val', run.props.vertAlign) : null;\n                            thisRun.ele('t', run.text).att('xml:space', 'preserve');\n                        }\n                    });\n                })();\n            }\n        });\n\n        var xmlString = xml.doc().end(promiseObj.xmlOutVars);\n        promiseObj.xlsx.folder('xl').file('sharedStrings.xml', xmlString);\n\n        resolve(promiseObj);\n    });\n};\n\nvar addStylesXML = function addStylesXML(promiseObj) {\n    // §12.3.20 Styles Part\n    return new Promise(function (resolve, reject) {\n\n        var xml = xmlbuilder.create('styleSheet', {\n            'version': '1.0',\n            'encoding': 'UTF-8',\n            'standalone': true\n        }).att('mc:Ignorable', 'x14ac').att('xmlns', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main').att('xmlns:mc', 'http://schemas.openxmlformats.org/markup-compatibility/2006').att('xmlns:x14ac', 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac');\n\n        if (promiseObj.wb.styleData.numFmts.length > 0) {\n            (function () {\n                var nfXML = xml.ele('numFmts').att('count', promiseObj.wb.styleData.numFmts.length);\n                promiseObj.wb.styleData.numFmts.forEach(function (nf) {\n                    nf.addToXMLele(nfXML);\n                });\n            })();\n        }\n\n        var fontXML = xml.ele('fonts').att('count', promiseObj.wb.styleData.fonts.length);\n        promiseObj.wb.styleData.fonts.forEach(function (f) {\n            f.addToXMLele(fontXML);\n        });\n\n        var fillXML = xml.ele('fills').att('count', promiseObj.wb.styleData.fills.length);\n        promiseObj.wb.styleData.fills.forEach(function (f) {\n            var fXML = fillXML.ele('fill');\n            f.addToXMLele(fXML);\n        });\n\n        var borderXML = xml.ele('borders').att('count', promiseObj.wb.styleData.borders.length);\n        promiseObj.wb.styleData.borders.forEach(function (b) {\n            b.addToXMLele(borderXML);\n        });\n\n        var cellXfsXML = xml.ele('cellXfs').att('count', promiseObj.wb.styles.length);\n        promiseObj.wb.styles.forEach(function (s) {\n            s.addXFtoXMLele(cellXfsXML);\n        });\n\n        if (promiseObj.wb.dxfCollection.length > 0) {\n            promiseObj.wb.dxfCollection.addToXMLele(xml);\n        }\n\n        var xmlString = xml.doc().end(promiseObj.xmlOutVars);\n        promiseObj.xlsx.folder('xl').file('styles.xml', xmlString);\n\n        resolve(promiseObj);\n    });\n};\n\nvar addDrawingsXML = function addDrawingsXML(promiseObj) {\n    return new Promise(function (resolve) {\n        if (!promiseObj.wb.mediaCollection.isEmpty) {\n\n            promiseObj.wb.sheets.forEach(function (ws) {\n                if (!ws.drawingCollection.isEmpty) {\n                    (function () {\n\n                        var drawingRelXML = xmlbuilder.create('Relationships', {\n                            'version': '1.0',\n                            'encoding': 'UTF-8',\n                            'standalone': true\n                        }).att('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');\n\n                        var drawingsXML = xmlbuilder.create('xdr:wsDr', {\n                            'version': '1.0',\n                            'encoding': 'UTF-8',\n                            'standalone': true\n                        });\n                        drawingsXML.att('xmlns:a', 'http://schemas.openxmlformats.org/drawingml/2006/main').att('xmlns:xdr', 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing');\n\n                        ws.drawingCollection.drawings.forEach(function (d) {\n\n                            if (d.kind === 'image') {\n                                var target = 'image' + d.id + '.' + d.extension;\n                                promiseObj.xlsx.folder('xl').folder('media').file(target, fs.readFileSync(d.imagePath));\n\n                                drawingRelXML.ele('Relationship').att('Id', d.rId).att('Target', '../media/' + target).att('Type', d.type);\n                            }\n\n                            d.addToXMLele(drawingsXML);\n                        });\n\n                        var drawingsXMLStr = drawingsXML.doc().end(promiseObj.xmlOutVars);\n                        var drawingRelXMLStr = drawingRelXML.doc().end(promiseObj.xmlOutVars);\n                        promiseObj.xlsx.folder('xl').folder('drawings').file('drawing' + ws.sheetId + '.xml', drawingsXMLStr);\n                        promiseObj.xlsx.folder('xl').folder('drawings').folder('_rels').file('drawing' + ws.sheetId + '.xml.rels', drawingRelXMLStr);\n                    })();\n                }\n            });\n        }\n        resolve(promiseObj);\n    });\n};\n\n/**\n * Use JSZip to generate file to a node buffer\n * @private\n * @memberof WorkBook\n * @param {WorkBook} wb WorkBook instance\n * @return {Promise} resolves with Buffer \n */\nvar writeToBuffer = function writeToBuffer(wb) {\n    return new Promise(function (resolve, reject) {\n        var promiseObj = {\n            wb: wb,\n            xlsx: new JSZip(),\n            xmlOutVars: {}\n        };\n\n        if (promiseObj.wb.sheets.length === 0) {\n            promiseObj.wb.WorkSheet();\n        }\n\n        addRootContentTypesXML(promiseObj).then(addWorkSheetsXML).then(addRootRelsXML).then(addWorkBookXML).then(addWorkBookRelsXML).then(addSharedStringsXML).then(addStylesXML).then(addDrawingsXML).then(function () {\n            wb.opts.jszip.type = 'nodebuffer';\n            promiseObj.xlsx.generateAsync(wb.opts.jszip).then(function (buf) {\n                resolve(buf);\n            }).catch(function (e) {\n                reject(e);\n            });\n        }).catch(function (e) {\n            wb.logger.error(e.stack);\n            reject(e);\n        });\n    });\n};\n\nmodule.exports = { writeToBuffer: writeToBuffer };\n//# sourceMappingURL=builder.js.map","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/.eslintrc.js":"module.exports = {\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\"\n    },\n    'rules': {\n        // TODO add a logger lib to the project\n        // 'no-console': 2\n        'brace-style': [2, '1tbs'],\n        'camelcase': 1,\n        'comma-dangle': [2, 'never'],\n        'comma-spacing': [2, { 'before': false, 'after': true }],\n        'comma-style': [2, 'last'],\n        'eqeqeq': 2,\n        'indent': [2, 4],\n        'key-spacing': [2, { 'beforeColon': false, 'afterColon': true }],\n        'keyword-spacing': 2,\n        'linebreak-style': [2, 'unix'],\n        'no-case-declarations': 0,\n        'no-console': 0,\n        'no-redeclare': 0,\n        'no-underscore-dangle': 0,\n        'no-unused-vars': 0,\n        'object-curly-spacing': [2, 'always'],\n        'quotes': [2, 'single'],\n        'semi': [2, 'always'],\n        'semi-spacing': [2, { 'before': false, 'after': true }],\n        'space-before-blocks': [2, 'always'],\n        'space-before-function-paren': [2, { 'anonymous': 'always', 'named': 'never' }],\n        'space-in-parens': [2, 'never'],\n        'space-infix-ops': 2,\n        'strict': 0\n    },\n    'env': {\n        'node': true,\n        'es6': true\n    },\n    'extends': 'eslint:recommended'\n};","/home/travis/build/npmtest/node-npmtest-excel4node/node_modules/excel4node/sample.js":"require('source-map-support').install();\nvar xl = require('./distribution');\n\nfunction generateWorkbook() {\n    var wb = new xl.Workbook({\n        defaultFont: {\n            name: 'Verdana',\n            size: 12\n        }\n    });\n\n    /*****************************************\n     * START Create a sample invoice\n     *****************************************/\n\n    // Create some styles to be used throughout\n    var multiLineStyle = wb.createStyle({\n        alignment: {\n            wrapText: true,\n            vertical: 'top'\n        }\n    });\n    var largeText = wb.createStyle({\n        font: {\n            name: 'Cambria',\n            size: 20\n        }\n    });\n    var medText = wb.createStyle({\n        font: {\n            name: 'Cambria',\n            size: 14,\n            color: '#D4762C'\n        },\n        alignment: {\n            vertical: 'center'\n        }\n    });\n\n    var currencyStyle = wb.createStyle({\n        numberFormat: '$##0.00; [Red]($##0.00); $0.00'\n    });\n\n    var invoiceWS = wb.addWorksheet('Invoice', {\n        pageSetup: {\n            fitToWidth: 1\n        },\n        headerFooter: {\n            oddHeader: 'iAmNater invoice',\n            oddFooter: 'Invoice Page &P'\n        }\n    });\n\n    // Set some row and column properties\n    invoiceWS.row(1).setHeight(25);\n    invoiceWS.row(2).setHeight(45);\n    invoiceWS.column(1).setWidth(3);\n    invoiceWS.column(2).setWidth(10);\n    invoiceWS.column(3).setWidth(35);\n    invoiceWS.column(5).setWidth(25);\n    invoiceWS.cell(2, 2).string('INVOICE').style(largeText);\n    invoiceWS.cell(2, 3).string('809871').style(largeText).style({ font: { color: '#D4762C' } });\n\n    // Add a company logo\n    invoiceWS.addImage({\n        path: './sampleFiles/logo.png',\n        type: 'picture',\n        position: {\n            type: 'twoCellAnchor',\n            from: {\n                col: 4,\n                colOff: 0,\n                row: 2,\n                rowOff: 0\n            },\n            to: {\n                col: 6,\n                colOff: 0,\n                row: 3,\n                rowOff: 0\n            }\n        }\n    });\n\n    // Add some borders to specific cells\n    invoiceWS.cell(2, 2, 2, 5).style({ border: { bottom: { style: 'thick', color: '#000000' } } });\n\n    // Add some data and adjust styles for specific cells\n    invoiceWS.cell(3, 2, 3, 3, true).string('January 1, 2016').style({ border: { bottom: { style: 'thin', color: '#D4762C' } } });\n    invoiceWS.cell(4, 2, 4, 3, true).string('PAYMENT DUE BY: March 1, 2016').style({ font: { bold: true } });\n\n    // style methods can be chained. multiple styles will be merged with last style taking precedence if there is a conflict\n    invoiceWS.cell(3, 5, 4, 5, true).formula('E31').style(currencyStyle).style({ font: { size: 20, color: '#D4762C' }, alignment: { vertical: 'center' } });\n    invoiceWS.cell(4, 2, 4, 5).style({ border: { bottom: { style: 'thin', color: '#000000' } } });\n\n    invoiceWS.row(6).setHeight(75);\n    invoiceWS.cell(6, 2, 6, 5).style(multiLineStyle);\n\n    // set some strings to have multiple font formats within a single cell\n    invoiceWS.cell(6, 2, 6, 3, true).string([\n        {\n            bold: true\n        },\n        'Client Name\\n',\n        {\n            bold: false\n        },\n        'Company Name Inc.\\n1234 First Street\\nSomewhere, OR 12345'\n    ]);\n\n    invoiceWS.cell(6, 4, 6, 5, true).string([\n        {\n            bold: true\n        },\n        'iAmNater.com\\n',\n        {\n            bold: false\n        },\n        '123 Nowhere Lane\\nSomewhere, OR 12345'\n    ]).style({ alignment: { horizontal: 'right' } });\n\n    invoiceWS.cell(8, 2, 8, 5).style({ border: { bottom: { style: 'thick', color: '#000000' } } });\n\n    invoiceWS.cell(10, 2).string('QUANTITY');\n    invoiceWS.cell(10, 3).string('DETAILS');\n    invoiceWS.cell(10, 4).string('UNIT PRICE').style({ alignment: { horizontal: 'right' } });\n    invoiceWS.cell(10, 5).string('LINE TOTAL').style({ alignment: { horizontal: 'right' } });\n\n    var items = require('./sampleFiles/invoiceData.json').items;\n    var i = 0;\n    var rowOffset = 11;\n    var oddBackgroundColor = '#F8F5EE';\n    while (i <= 10) {\n        var item = items[i];\n        var curRow = rowOffset + i;\n        if (item !== undefined) {\n            invoiceWS.cell(curRow, 2).number(item.units).style({ alignment: { horizontal: 'left' } });\n            invoiceWS.cell(curRow, 3).string(item.description);\n            invoiceWS.cell(curRow, 4).number(item.unitCost).style(currencyStyle);\n            invoiceWS.cell(curRow, 5).formula(xl.getExcelCellRef(rowOffset + i, 2) + '*' + xl.getExcelCellRef(rowOffset + 1, 4)).style(currencyStyle);\n        }\n        if (i % 2 === 0) {\n            invoiceWS.cell(curRow, 2, curRow, 5).style({\n                fill: {\n                    type: 'pattern',\n                    patternType: 'solid',\n                    fgColor: oddBackgroundColor\n                }\n            });\n        }\n        i++;\n    }\n    invoiceWS.cell(21, 2, 21, 5).style({ border: { bottom: { style: 'thin', color: '#DCD1B3' } } });\n\n    invoiceWS.cell(22, 4).string('Discount');\n    invoiceWS.cell(22, 5).number(0.00).style(currencyStyle);\n\n    invoiceWS.cell(23, 4).string('Net Total');\n    invoiceWS.cell(23, 5).formula('SUM(E11:E21)').style(currencyStyle);\n\n    invoiceWS.cell(23, 2, 23, 5).style({ border: { bottom: { style: 'thin', color: '#000000' } } });\n\n    invoiceWS.row(24).setHeight(20);\n    invoiceWS.cell(24, 4, 25, 4, true).string('USD TOTAL').style(medText);\n    invoiceWS.cell(24, 5, 25, 5, true).formula('SUM(E22:E23)').style(medText).style(currencyStyle);\n    /*****************************************\n     * END Create a sample invoice\n     *****************************************/\n\n\n    /*****************************************\n     * START Create a filterable list\n     *****************************************/\n\n    var filterSheet = wb.addWorksheet('Filters');\n\n    for (var i = 1; i <= 10; i++) {\n        filterSheet.cell(1, i).string('Header' + i);\n    }\n    filterSheet.row(1).filter(1, 10);\n\n    for (var r = 2; r <= 30; r++) {\n        for (var c = 1; c <= 10; c++) {\n            filterSheet.cell(r, c).number(parseInt(Math.random() * 100));\n        }\n    }\n     /*****************************************\n     * END Create a filterable list\n     *****************************************/\n\n    /*****************************************\n     * START Create collapsable lists\n     *****************************************/\n\n\n    var collapseSheet = wb.addWorksheet('Collapsables', {\n        pageSetup: {\n            fitToWidth: 1\n        },\n        outline: {\n            summaryBelow: true\n        }\n    });\n\n    var rowOffset = 0;\n    for (var r = 1; r <= 10; r++) {\n        for (var c = 1; c <= 10; c++) {\n            collapseSheet.cell(r + rowOffset, c).number(parseInt(Math.random() * 100));\n        }\n        collapseSheet.row(r + rowOffset).group(1, true);\n    }\n    for (var i = 1; i <= 10; i++) {\n        collapseSheet.cell(11, i).formula('SUM(' + xl.getExcelCellRef(rowOffset + 1, i) + ':' + xl.getExcelCellRef(rowOffset + 10, i) + ')');\n    }\n    collapseSheet.cell(11, 1, 11, 10).style({\n        fill: {\n            type: 'pattern',\n            patternType: 'solid',\n            fgColor: '#C2D6EC'\n        }\n    });\n\n    var rowOffset = 11;\n    for (var r = 1; r <= 10; r++) {\n        for (var c = 1; c <= 10; c++) {\n            collapseSheet.cell(r + rowOffset, c).number(parseInt(Math.random() * 100));\n        }\n        collapseSheet.row(r + rowOffset).group(1, true);\n    }\n    for (var i = 1; i <= 10; i++) {\n        collapseSheet.cell(22, i).formula('SUM(' + xl.getExcelCellRef(rowOffset + 1, i) + ':' + xl.getExcelCellRef(rowOffset + 10, i) + ')');\n    }\n    collapseSheet.cell(22, 1, 22, 10).style({\n        fill: {\n            type: 'pattern',\n            patternType: 'solid',\n            fgColor: '#4273B0'\n        }\n    });\n\n\n\n    var rowOffset = 22;\n    for (var r = 1; r <= 10; r++) {\n        for (var c = 1; c <= 10; c++) {\n            collapseSheet.cell(r + rowOffset, c).number(parseInt(Math.random() * 100));\n        }\n        collapseSheet.row(r + rowOffset).group(1, true);\n    }\n    for (var i = 1; i <= 10; i++) {\n        collapseSheet.cell(33, i).formula('SUM(' + xl.getExcelCellRef(rowOffset + 1, i) + ':' + xl.getExcelCellRef(rowOffset + 10, i) + ')');\n    }\n    collapseSheet.cell(33, 1, 33, 10).style({\n        fill: {\n            type: 'pattern',\n            patternType: 'solid',\n            fgColor: '#C2D6EC'\n        }\n    });\n\n    var rowOffset = 33;\n    for (var r = 1; r <= 10; r++) {\n        for (var c = 1; c <= 10; c++) {\n            collapseSheet.cell(r + rowOffset, c).number(parseInt(Math.random() * 100));\n        }\n        collapseSheet.row(r + rowOffset).group(1, true);\n    }\n    for (var i = 1; i <= 10; i++) {\n        collapseSheet.cell(44, i).formula('SUM(' + xl.getExcelCellRef(rowOffset + 1, i) + ':' + xl.getExcelCellRef(rowOffset + 10, i) + ')');\n    }\n    collapseSheet.cell(44, 1, 44, 10).style({\n        fill: {\n            type: 'pattern',\n            patternType: 'solid',\n            fgColor: '#4273B0'\n        }\n    });\n\n\n\n    var rowOffset = 44;\n    for (var r = 1; r <= 10; r++) {\n        for (var c = 1; c <= 10; c++) {\n            collapseSheet.cell(r + rowOffset, c).number(parseInt(Math.random() * 100));\n        }\n        collapseSheet.row(r + rowOffset).group(1, true);\n    }\n    for (var i = 1; i <= 10; i++) {\n        collapseSheet.cell(55, i).formula('SUM(' + xl.getExcelCellRef(rowOffset + 1, i) + ':' + xl.getExcelCellRef(rowOffset + 10, i) + ')');\n    }\n    collapseSheet.cell(55, 1, 55, 10).style({\n        fill: {\n            type: 'pattern',\n            patternType: 'solid',\n            fgColor: '#C2D6EC'\n        }\n    });\n\n    var rowOffset = 55;\n    for (var r = 1; r <= 10; r++) {\n        for (var c = 1; c <= 10; c++) {\n            collapseSheet.cell(r + rowOffset, c).number(parseInt(Math.random() * 100));\n        }\n        collapseSheet.row(r + rowOffset).group(1, true);\n    }\n    for (var i = 1; i <= 10; i++) {\n        collapseSheet.cell(66, i).formula('SUM(' + xl.getExcelCellRef(rowOffset + 1, i) + ':' + xl.getExcelCellRef(rowOffset + 10, i) + ')');\n    }\n    collapseSheet.cell(66, 1, 66, 10).style({\n        fill: {\n            type: 'pattern',\n            patternType: 'solid',\n            fgColor: '#4273B0'\n        }\n    });\n    /*****************************************\n     * START Create collapsable lists\n     *****************************************/\n\n    /*****************************************\n     * START Create Frozen lists\n     *****************************************/\n\n    var frozenSheet = wb.addWorksheet('Frozen');\n\n    for (var i = 2; i <= 21; i++) {\n        frozenSheet.cell(1, i).string('Column' + i);\n    }\n    frozenSheet.row(1).freeze();\n\n    for (var r = 2; r <= 30; r++) {\n        frozenSheet.cell(r, 1).string('Row' + r);\n        for (var c = 2; c <= 22; c++) {\n            frozenSheet.cell(r, c).number(parseInt(Math.random() * 100));\n        }\n    }\n    frozenSheet.column(1).freeze();\n\n     /*****************************************\n     * END Create Frozen lists\n     *****************************************/\n\n    /*****************************************\n     * START Create Split sheet\n     *****************************************/\n\n    var splitSheet = wb.addWorksheet('SplitSheet', {\n        'sheetView': {\n            'pane': {\n                'activePane': 'bottomRight',\n                'state': 'split',\n                'xSplit': 2000,\n                'ySplit': 3000\n            }\n        }\n    });\n\n    for (var r = 1; r <= 30; r++) {\n        for (var c = 1; c <= 20; c++) {\n            splitSheet.cell(r, c).number(parseInt(Math.random() * 100));\n        }\n    }\n\n     /*****************************************\n     * END Create Split\n     *****************************************/\n\n    /*****************************************\n     * START Create Selectable Options list\n     *****************************************/\n    var optionsSheet = wb.addWorksheet('Selectable Options');\n\n    optionsSheet.cell(1, 1).string('Booleans');\n    optionsSheet.cell(1, 2).string('Option List');\n    optionsSheet.cell(1, 3).string('Numbers 1-10');\n\n    optionsSheet.addDataValidation({\n        type: 'list',\n        allowBlank: true,\n        prompt: 'Choose from dropdown',\n        error: 'Invalid choice was chosen',\n        sqref: 'A2:A10',\n        formulas: [\n            'true,false'\n        ]\n    });\n\n    optionsSheet.addDataValidation({\n        type: 'list',\n        allowBlank: true,\n        prompt: 'Choose from dropdown',\n        promptTitle: 'Choose from dropdown',\n        error: 'Invalid choice was chosen',\n        showInputMessage: true,\n        sqref: 'B2:B10',\n        formulas: [\n            'option 1,option 2,option 3'\n        ]\n    });\n\n    optionsSheet.addDataValidation({\n        errorStyle: 'stop',\n        error: 'Number must be between 1 and 10',\n        type: 'whole',\n        operator: 'between',\n        allowBlank: 1,\n        sqref: 'C2:C10',\n        formulas: [1, 10]\n    });\n    /*****************************************\n     * END Create Selectable Options list\n     *****************************************/\n\n    /*****************************************\n     * START final sheet\n     *****************************************/\n\n    var funSheet = wb.addWorksheet('fun', {\n        pageSetup: {\n            orientation: 'landscape'\n        },\n        sheetView: {\n            zoomScale: 120\n        }\n    });\n\n    funSheet.cell(1, 1).string('Release 1.0.0! Finally done.');\n    funSheet.addImage({\n        path: './sampleFiles/thumbsUp.jpg',\n        type: 'picture',\n        position: {\n            type: 'absoluteAnchor',\n            x: 0,\n            y: '10mm'\n        }\n    });\n\n\n    /*****************************************\n     * END final sheet\n     *****************************************/\n\n    return wb;\n}\n\nvar wb = generateWorkbook();\nwb.write('Excel1.xlsx');\nconsole.log('Excel1.xlsx written');\n\nwb.write('Excel.xlsx', function (err, stats) {\n    console.log('Excel.xlsx written and has the following stats');\n    console.log(stats);\n});\n\nvar http = require('http');\nhttp.createServer(function (req, res) {\n    wb.write('MyExcel.xlsx', res);\n}).listen(3000, function () {\n    console.log('Go to http://localhost:3000 to download a copy of this Workbook');\n});\n"}